[{"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/index.js":"1","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/App.js":"2","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Account.js":"3","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/pages/Main.js":"4","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/TopMenu.js":"5","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/ChatSide.js":"6","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/ChatRight.js":"7","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Messages.js":"8","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Members.js":"9","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/pages/PrivateRoute.js":"10","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/auth/AuthState.js":"11","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/auth/AuthContext.js":"12","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/types.js":"13","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/auth/AuthReducer.js":"14","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/help/functions.js":"15","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/axios.js":"16","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Loading.js":"17","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/chat/chatState.js":"18","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/chat/chatContext.js":"19","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/chat/chatReducer.js":"20","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/help/sockets.js":"21"},{"size":197,"mtime":1611603426331,"results":"22","hashOfConfig":"23"},{"size":420,"mtime":1611603426327,"results":"24","hashOfConfig":"23"},{"size":4382,"mtime":1611603426327,"results":"25","hashOfConfig":"23"},{"size":2755,"mtime":1612222808806,"results":"26","hashOfConfig":"23"},{"size":5164,"mtime":1611603426331,"results":"27","hashOfConfig":"23"},{"size":8318,"mtime":1612293794474,"results":"28","hashOfConfig":"23"},{"size":5776,"mtime":1611607572404,"results":"29","hashOfConfig":"23"},{"size":3553,"mtime":1612293356627,"results":"30","hashOfConfig":"23"},{"size":6941,"mtime":1612222916820,"results":"31","hashOfConfig":"23"},{"size":1234,"mtime":1611607572411,"results":"32","hashOfConfig":"23"},{"size":6255,"mtime":1612293738672,"results":"33","hashOfConfig":"23"},{"size":104,"mtime":1611603426331,"results":"34","hashOfConfig":"23"},{"size":1387,"mtime":1612293696470,"results":"35","hashOfConfig":"23"},{"size":2838,"mtime":1612293779608,"results":"36","hashOfConfig":"23"},{"size":1129,"mtime":1611607572408,"results":"37","hashOfConfig":"23"},{"size":204,"mtime":1611603426327,"results":"38","hashOfConfig":"23"},{"size":406,"mtime":1611603426327,"results":"39","hashOfConfig":"23"},{"size":5784,"mtime":1612222956715,"results":"40","hashOfConfig":"23"},{"size":104,"mtime":1611603426331,"results":"41","hashOfConfig":"23"},{"size":7939,"mtime":1611608398381,"results":"42","hashOfConfig":"23"},{"size":1592,"mtime":1612222800449,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1vno2oc",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"46"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"46"},"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/index.js",[],["99","100"],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/App.js",["101"],"import React, { useEffect } from 'react'\nimport AuthState from './context/auth/AuthState'\nimport ChatState from './context/chat/chatState'\nimport PrivateRoute from './pages/PrivateRoute'\n\n//styles\nimport \"./custom.scss\"\n\nfunction App() {\n  return (\n    <AuthState>\n      <ChatState>\n        <div className=\"dchat\">\n          <PrivateRoute />\n        </div>\n      </ChatState>\n    </AuthState>\n  );\n}\n\nexport default App;","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Account.js",["102","103","104","105","106"],"import React, { useState, useContext } from 'react'\nimport AuthContext from '../context/auth/AuthContext';\n\nexport default function Account() {\n    //context promenlivi\n    const { logirajSe, registrirajSe, errors, setError, sepromenuvaLozinka } = useContext(AuthContext);\n\n    //Login promenlivi:\n    const [email, setEmail] = useState(\"\");\n    const [lozinka, namestiLozinka] = useState(\"\");\n\n    //Register promenlivi:\n    const [ime, namestiIme] = useState(\"\");\n    const [prezime, namestiPrezime] = useState(\"\");\n    const [telefon, namestiTelefon] = useState(\"\");\n    const [emailRegister, setEmailRegister] = useState(\"\");\n    const [passwordRegister, setPasswordRegister] = useState(\"\");\n\n    // koj screen da se prikazi:\n    const [loginForm, setLoginForm] = useState(true);\n\n    // najavi se\n    const submitLogin = async (e) => {\n        e.preventDefault();\n        const user = {\n            email,\n            lozinka\n        }\n\n        const logiran = await logirajSe(user);\n    }\n\n    //registriraj se\n    const submitRegister = async (e) => {\n        e.preventDefault();\n\n        const user = {\n            email: emailRegister,\n            lozinka: passwordRegister,\n            ime,\n            prezime,\n            telefon\n        }\n\n        const registriran = await registrirajSe(user);\n\n    }\n\n    if (sepromenuvaLozinka === false) {\n        return (\n            <div className=\"account-form\">\n                <div className=\"account-form__header\">\n                    <h2>{loginForm ? 'Најави се' : 'Регистрација'}</h2>\n                </div>\n                <div className=\"account-form__inner\">\n                    {\n                        loginForm ? (\n                            <form onSubmit={submitLogin}>\n                                <input value={email} onChange={(e) => setEmail(e.target.value)} placeholder=\"Е-mail адреса\" type=\"text\" />\n                                <input value={lozinka} onChange={(e) => namestiLozinka(e.target.value)} placeholder=\"Лозинка\" type=\"password\" />\n                                <button type=\"submit\">Најава</button>\n\n                                <a className=\"pointer hover-text-primary\" onClick={() => { setLoginForm(false); }}>Регистрирај се</a>\n\n                                {\n                                    errors && (\n                                        <div className=\"error-msg\">\n                                            <p>{errors}</p>\n                                        </div>\n                                    )\n                                }\n                            </form>) : (\n                                <form onSubmit={submitRegister}>\n                                    <input value={ime} onChange={(e) => namestiIme(e.target.value)} placeholder=\"Вашето име\" type=\"text\" />\n                                    <input value={prezime} onChange={(e) => namestiPrezime(e.target.value)} placeholder=\"Вашето презиме\" type=\"text\" />\n                                    <input value={telefon} onChange={(e) => namestiTelefon(e.target.value)} placeholder=\"Телефонски број\" type=\"text\" />\n                                    <input value={emailRegister} onChange={(e) => setEmailRegister(e.target.value)} placeholder=\"Е-mail адреса\" type=\"text\" />\n                                    <input value={passwordRegister} onChange={(e) => setPasswordRegister(e.target.value)} placeholder=\"Лозинка\" type=\"password\" />\n                                    <button type=\"submit\">Регистрирај се</button>\n                                    <a className=\"pointer hover-text-primary\" onClick={() => { setLoginForm(true); }}>Најава</a>\n\n                                    {\n                                        errors && (\n                                            <div className=\"error-msg\">\n                                                <p>{errors}</p>\n                                            </div>\n                                        )\n                                    }\n                                </form>\n                            )\n                    }\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <h4 className=\"text-white\">Се зачувува...</h4>\n        )\n    }\n}\n","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/pages/Main.js",["107","108","109","110","111","112","113","114","115","116","117"],"import React, { useContext, useEffect, useState } from 'react'\nimport TopMenu from '../components/TopMenu'\nimport ChatSide from '../components/ChatSide';\nimport ChatRight from '../components/ChatRight';\nimport ChatContext from '../context/chat/chatContext'\nimport AuthContext from '../context/auth/AuthContext'\nimport { zemiSiteGrupi } from '../help/functions'\n\nimport { inicijalizirajSocket, pretplataChat, vleziVoGrupi } from '../help/sockets'\n\nexport default function Main() {\n    const [chats, setChats] = useState([]);\n    const [siteGrupi, namestiSiteGrupi] = useState([]);\n    const { grupi, grupa, vmetniPoraka, zemiGrupi, poraki, zemiPoraki, osveziGrupi, procitanaPorakaKorisnik, namestiAktivniPoraki, namestiGrupa } = useContext(ChatContext);\n    const { user, users, citajKorisnici, setChanging } = useContext(AuthContext);\n\n    useEffect(() => {\n        inicijalizirajSocket();\n        pretplataChat(vmetniPoraka, procitanaPorakaKorisnik, async function() {\n        await zemiGrupi(user._id);\n        namestiAktivniPoraki([])\n        namestiGrupa(null);\n        });\n\n        return () => {\n\n        }\n    }, []);\n\n    useEffect(() => {\n        async function zemiGrupiAsync() {\n            const grupi = await zemiGrupi(user._id);\n        }\n\n        zemiGrupiAsync();\n\n    }, []);\n\n    useEffect(() => {\n        console.log('se smena refresh grupi');\n        const zemiGrupiAsync = async () => {\n            await zemiGrupi(user._id);\n        }\n        if (osveziGrupi) {\n            console.log('se smena refresh grupi -true');\n\n            zemiGrupiAsync();\n        }\n    }, [osveziGrupi])\n\n    useEffect(() => {\n        if (grupi && grupi.length != 0) {\n            let grupiTemp = grupi.map((grupa, index) => grupa._id);\n            zemiPoraki(grupiTemp.toString());\n\n            // Najdi gi site users od site grupi\n            let korisniciTemp = [];\n            grupi.forEach(grupa => {\n                grupa.korisnici.forEach(korisnik => {\n                    let duplicate = korisniciTemp.some(korisnicko => korisnicko.trim() == korisnik.trim());\n                    if (!duplicate) {\n                        korisniciTemp.push(korisnik.trim());\n                    }\n                })\n            });\n\n            console.log(korisniciTemp);\n\n            citajKorisnici();\n            namestiSiteGrupi(zemiSiteGrupi(user._id, grupi));\n\n            vleziVoGrupi(grupi, user._id);\n        } else {\n            vleziVoGrupi([], user._id);    \n        }\n    }, [grupi]);\n\n\n    return (\n        <div className=\"chat-wrap\">\n            <TopMenu />\n            <div className=\"bottom-main\">\n                <ChatSide grupi={siteGrupi} poraki={poraki} users={users} />\n                <ChatRight />\n            </div>\n        </div>\n    )\n}","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/TopMenu.js",["118","119"],"import React, {useContext, useState} from 'react'\n\nimport Avatar from 'react-avatar'\nimport {MdChat} from 'react-icons/md'\nimport { GrFormDown } from 'react-icons/gr'\nimport AuthContext from '../context/auth/AuthContext'\n\n\nexport default function TopMenu() {\n    const { odlogirajSe, promeniLozinka, setChanging, errors, lozinkaPoraka, user } = useContext(AuthContext);\n    const [settings, setSettings] = useState(false);\n    const [popup, setPopup] = useState(false);\n    const [loadingBtn, setLoadingBtn] = useState(false);\n    const [lozinki, namestiLozinki] = useState({\n        oldPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\"\n    })\n\n    //local funkcii\n    const logout = () => {\n        odlogirajSe();\n    }\n\n    const handleChange = (e) => {\n        console.log(e.target.name);\n        namestiLozinki({\n            ...lozinki,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        setLoadingBtn(true);\n        setChanging(true);\n        var saved = await promeniLozinka(lozinki);\n        setLoadingBtn(false);\n    }\n\n    const { oldPassword, newPassword, confirmPassword } = lozinki;\n    \n    return (\n        <div className=\"top-menu container-small\">\n            <div className=\"top-menu__left\">\n                <div className=\"logo\"> \n                    <MdChat className=\"logo-icon\" />\n                    <h4>D-Chat</h4>\n                </div>\n            </div>\n            <div className=\"top-menu__right\" onClick={() => setSettings(!settings)}>\n                <div className=\"user-settings-toggle\">\n                    <Avatar className=\"avatar\" size=\"30\" name={`${user.ime} ${user.prezime}`} />\n                    <p>{user.ime} {user.prezime}</p>\n                    <GrFormDown size=\"24\" />\n                </div>\n            </div>\n\n            {settings && (\n                <div className=\"options-dropdown\">\n                    <div onClick={() => setPopup(!popup)} className=\"option-choose\">\n                        <p>Промени лозинка</p>\n                    </div>\n                    <div onClick={logout} className=\"option-choose\">\n                        <p>Одјави се</p>\n                    </div>\n                </div>\n            )}\n\n\n            {\n                popup && (\n                    <div className=\"settings fixed d-flex flex-center top-0 left-0 h-100 w-100 bg-dark-light z-9\">\n                        <div className=\"settings-inner d-flex flex-column bg-white box-shadow-light\">\n                            <div className=\"settings-header bb-1px-solid b-lightGrey-lighter d-flex justify-between align-center\">\n                                <h4 className=\"text-uppercase\">Подесувања</h4>\n                                <span onClick={() => setPopup(false)}>&#10005;</span>\n                            </div>\n                            <form noValidate onSubmit={onSubmit} className=\"settings-inner d-flex flex-column px-20px py-20px\">\n                                <div className=\"contact-box d-flex flex-column w-100 b-2px-solid b-lightGrey-lighter py-12px mt-15px\">\n                                    <input className=\"px-5px w-100\" name=\"oldPassword\" onChange={handleChange} value={oldPassword} required type=\"password\" />\n                                    <label htmlFor=\"\">Стара лозинка</label>\n                                </div>\n                                <div className=\"contact-box d-flex flex-column w-100 b-2px-solid b-lightGrey-lighter py-12px mt-15px\">\n                                    <input className=\"px-5px w-100\" name=\"newPassword\" onChange={handleChange} value={newPassword} required type=\"password\" />\n                                    <label htmlFor=\"\">Нова лозинка</label>\n                                </div>\n                                <div className=\"contact-box d-flex flex-column w-100 b-2px-solid b-lightGrey-lighter py-12px mt-15px\">\n                                    <input className=\"px-5px w-100\" name=\"confirmPassword\" onChange={handleChange} value={confirmPassword} required type=\"password\" />\n                                    <label htmlFor=\"\">Потврди лозинка</label>\n                                </div>\n                                <div className=\"submit-btn mt-15px\">\n                                    <button className=\"w-100 bg-primary hover-bg-primary-dark text-uppercase hover-text-dark py-20px text-center text-white\">\n                                        {loadingBtn ? 'Ве молиме почекајте...' : 'Промени лозинка'}\n                                    </button>\n                                </div>\n\n                                <div className=\"error-msg mt-20px\">\n                                    {errors ? errors : ''}\n                                    {lozinkaPoraka != \"\" ? lozinkaPoraka : \"\"}\n                                </div>\n                              \n                            </form>\n\n                        </div>\n                    </div>\n                )\n            }\n        </div>\n    )\n}\n","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/ChatSide.js",["120","121","122","123","124","125","126","127","128","129"],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/ChatRight.js",["130","131","132","133","134","135","136","137","138","139","140","141"],"import React, { useState, useEffect, useContext } from 'react'\nimport Avatar from 'react-avatar'\nimport { RiSendPlane2Line } from 'react-icons/ri'\nimport { AiOutlineSave } from 'react-icons/ai'\n\nimport AuthContext from '../context/auth/AuthContext'\nimport ChatContext from '../context/chat/chatContext'\n\nimport Messages from './Messages';\nimport Members from './Members';\n\n\n//sockets\nimport { ispratiPorakaSocket, procitanoSocket } from '../help/sockets'\n\nexport default function ChatRight() {\n    const [poraka, namestiPoraka] = useState(\"\");\n    const [promenlivo, namestiPromenlivo] = useState(false);\n    const [tab, namestiTab] = useState(1);\n    const [imeGrupa, namestiImeGrupa] = useState('Ime na grupa');\n\n    //context\n    const { zemiPoraki, novaGrupa, aktivniPoraki, poraki, kreirajPoraka, grupa, izmeniGrupa, namestiNovaGrupa, namestiProcitano, namestiProcitanaGrupa } = useContext(ChatContext);\n    const { user } = useContext(AuthContext);\n\n    //useeffects\n    useEffect(() => {\n        if (grupa) {\n            namestiImeGrupa(grupa.ime);\n        }\n        console.log('promeneto grupa');\n        console.log(grupa);\n    }, [grupa]);\n\n    const promeniImeGrupa = async () => {\n        if (imeGrupa.trim() != \"\") {\n            await izmeniGrupa(grupa._id, imeGrupa);\n\n            namestiPromenlivo(false);\n        }\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n\n        if (poraka.trim() != \"\") {\n            let daliENovaGrupa = false;\n            if (aktivniPoraki.length == 0 || novaGrupa == true) {\n                daliENovaGrupa = true;\n            }\n\n            console.log(grupa.korisnici);\n            ispratiPorakaSocket(grupa._id, poraka, user._id, kreirajPoraka, grupa.korisnici, daliENovaGrupa);\n\n            namestiNovaGrupa(false);\n            namestiPoraka('');\n        }\n    }\n\n    const namestiPromenlivoGrupa = (vnesenoIme) => {\n        namestiImeGrupa(vnesenoIme);\n\n        if (vnesenoIme.trim() != \"\") {\n            namestiPromenlivo(true);\n        } else {\n            namestiPromenlivo(false);\n        }\n    }\n\n    const namestiProcitaniPoraki = () => {\n        let poslednaPoraka = aktivniPoraki[aktivniPoraki.length - 1];\n\n        if (!!poslednaPoraka && !!poslednaPoraka._id) {\n            if (poslednaPoraka.procitanoOd.includes(user._id)) {\n                console.log('vekje ja procital');\n            } else {\n                procitanoSocket(grupa._id, user._id, function() {\n                    namestiProcitano(user._id, poslednaPoraka._id);\n                })\n            }\n        } else {\n            if (!!poslednaPoraka) {\n                if (grupa) {\n                    procitanoSocket(grupa._id, user._id, function() {\n                        namestiProcitanaGrupa(grupa._id, user._id);\n                    })\n                }\n            }\n            console.log('nema nisto');\n        }\n    }\n\n    if (grupa) {\n        return (\n            <div className=\"chat-right\">\n                <div className=\"chat-right__top\">\n                    <div className=\"chat-right__top-left\">\n                        <div className=\"chat-name-icon container-small\">\n                            <div className=\"chat-icon\">\n                                <Avatar name={grupa.ime} className=\"radius-half\" size={50} />\n                            </div>\n                            <div className=\"chat-name\">\n                                <div className=\"chat-name__edit d-flex\">\n                                    <input onChange={(e) => namestiPromenlivoGrupa(e.target.value)} value={imeGrupa} />\n                                    {\n                                        promenlivo && (\n                                            <AiOutlineSave onClick={() => promeniImeGrupa()} size={20} />\n                                        )\n                                    }\n                                </div>\n                                <span>{grupa.korisnici.length} членови</span>\n                            </div>\n                        </div>\n    \n                    </div>\n                    <div className=\"chat-tabs container-small\">\n                        <div onClick={() => namestiTab(1)} className={`chat-tab ${tab == 1 ? 'active' : ''}`}>\n                            <p>Пораки</p>\n                        </div>\n                        <div onClick={() => namestiTab(2)} className={`chat-tab ${tab == 2 ? 'active' : ''}`}>\n                            <p>Членови</p>\n                        </div>\n                    </div>\n                </div>\n    \n                {\n                    tab == 1 ? (\n                        <Messages user={user} />\n                    ) : (\n                        <Members />\n                        )\n                }\n    \n                {\n                    tab == 1 && (\n                        <div onMouseOver={namestiProcitaniPoraki} className=\"chat-new\">\n                            <form onSubmit={onSubmit} className=\"newMesasge__form\">\n                                <input onChange={namestiProcitaniPoraki} onFocus={namestiProcitaniPoraki} value={poraka} onChange={(e) => namestiPoraka(e.target.value)} placeholder=\"Напиши порака...\" type=\"text\" />\n                                <button>\n                                    <RiSendPlane2Line size={23} />\n                                </button>\n                            </form>\n                            {/* <form className=\"img-pick\" action=\"\">\n                                <input type=\"file\" name=\"\" id=\"\" />\n                            </form> */}\n                        </div>\n    \n                    )\n                }\n            </div>\n        )\n    } else {\n        return <div>\n            <p></p>\n        </div>\n    }\n}\n","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Messages.js",["142","143","144","145","146","147","148","149","150","151","152"],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Members.js",["153","154","155","156","157","158","159","160","161","162","163","164"],"import React, { useState, useEffect, useContext } from 'react'\nimport Avatar from 'react-avatar'\nimport { AiFillSetting } from 'react-icons/ai'\n\nimport ChatContext from '../context/chat/chatContext'\nimport AuthContext from '../context/auth/AuthContext'\nimport { zemiKorisnik } from '../help/functions';\nimport { izbrisanKorisnik } from '../help/sockets';\n\nexport default function Members() {\n    const { grupa, izmeniGrupa, namestiNovaGrupa } = useContext(ChatContext);\n    const { users, najdiKorisnikPoMail, novaGrupaMsg, poslednoDodadenMail } = useContext(AuthContext);\n    const [tempKorisnici, namestiTempKorisnici] = useState([]);\n    const [semenuva, namestiSemenuva] = useState(false);\n    const [grupaNaslov, namestiGrupaNaslov] = useState('');\n    const [change, setChange] = useState(false);\n    const [email, setEmail] = useState(\"\");\n\n    const submitForm = async e => {\n        e.preventDefault();\n\n        await najdiKorisnikPoMail(email);\n        setChange(!change);\n    }\n\n    useEffect(() => {\n        if (poslednoDodadenMail) {\n            if (poslednoDodadenMail.email.trim() != \"\") {\n                let posledenEmailPostoi = tempKorisnici.some(tempkorisnik => tempkorisnik.email == poslednoDodadenMail.email);\n    \n                if (posledenEmailPostoi == false) {\n                    let noviKorisnici = tempKorisnici;\n                    noviKorisnici.push(poslednoDodadenMail);\n    \n                    namestiTempKorisnici(noviKorisnici);\n                    setEmail('');\n                }\n            }\n\n        }\n    }, [poslednoDodadenMail, change]);\n\n    useEffect(() => {\n        if (grupa) {\n            let tmails = [];\n\n            for (let i = 0; i < grupa.korisnici.length; i++) {\n                for (let j = 0; j < users.length; j++) {\n                    console.log(users[j]._id);\n                    console.log(grupa.korisnici[i]);\n                    if (grupa.korisnici[i] == users[j]._id) {\n                        console.log('isto e');\n                        tmails.push({\n                            id: users[j]._id,\n                            email: users[j].email\n                        });\n                    }\n                }\n            }\n\n            namestiTempKorisnici(tmails);\n            namestiGrupaNaslov(grupa.ime);\n        }\n        \n    }, [grupa]);\n\n    const otstraniOdTemp = async (korisnikZaB) => {\n        let noviKorisnici = tempKorisnici.filter(korisnik => korisnik.email != korisnikZaB.email);\n\n        namestiTempKorisnici(noviKorisnici);\n    }\n\n    const izmeniGrupaAsync = async () => {\n        let korisnici = tempKorisnici.map(tk => {\n            let rmId = tk.id;\n\n            if (!!tk._id) rmId = tk._id;\n\n            return rmId;\n        });\n\n        let izbrisaniKorisnici = [];\n\n        for (let i = 0; i < grupa.korisnici.length; i++) {\n            let najdeno = false;\n            for (let j = 0; j < korisnici.length; j++) {\n                if (grupa.korisnici[i] == korisnici[j]) {\n                    najdeno = true;\n                }\n            }\n\n            if (najdeno == false) {\n                izbrisaniKorisnici.push(grupa.korisnici[i]);\n            }\n        }   \nconsole.log('ova se izbrisani korisnici');\n        console.log(izbrisaniKorisnici);\nconsole.log('ova se izbrisani korisnici');\n\n       \n\n        await izmeniGrupa(grupa._id, grupaNaslov, korisnici, izbrisaniKorisnici);\n        namestiSemenuva(false);\n        namestiNovaGrupa(true);\n\n\n    }\n\n\n    return (\n        <div className=\"members\">\n           {\n                grupa.korisnici.map(userId => {\n                    let user = zemiKorisnik(userId, users);\n\n                    return (\n                        <div key={user._id} className=\"member\">\n                            <div className=\"member-left\">\n                                <Avatar className=\"avatar\" size=\"30\" name={`${user.ime}`} />\n                                <span className=\"member-name\">{user.ime} {user.prezime}</span>\n                            </div>\n                            <div onClick={() => namestiSemenuva(true)} className=\"member-right\">\n                                <AiFillSetting color=\"#444\" size=\"20\" />\n                            </div>\n                        </div>\n                    )\n                })\n            }\n\n\n{\n                semenuva && (\n                    <div className=\"newMessage-popup\">\n                        <div className=\"newMessage-popup__inner\">\n                            <div className=\"header\">\n                                <input value={grupaNaslov} onChange={(e) => namestiGrupaNaslov(e.target.value)} className=\"header-input\" placeholder=\"Име на група\" />\n                                <span onClick={() => namestiSemenuva(false)}>&#10005;</span>\n                            </div>\n\n                            <div className=\"content\">\n                                {\n                                     (tempKorisnici && tempKorisnici.length != 0) ? (\n                                <div className=\"list\">\n                                    {\n                                        tempKorisnici.map(tempkorisnik => (\n                                        <div className=\"item\">\n                                            <p>{tempkorisnik.email}</p>\n                                            <span onClick={() => otstraniOdTemp(tempkorisnik)}>&#10005;</span>\n                                        </div>\n\n                                        ))\n                                    }\n                                </div>\n\n                                     ) : (\n                                         <p className=\"noUsers\">Нема корисници</p>\n                                     )\n                                }\n\n                                <form onSubmit={submitForm} className=\"form\">\n                                    <input value={email} onChange={(e) => setEmail(e.target.value)} placeholder=\"Еmail адреса на членот...\" type=\"email\"/>\n                                    <button>+</button>\n                                </form>\n\n                                {\n                                    (tempKorisnici && tempKorisnici.length != 0) && (\n                                        <button onClick={izmeniGrupaAsync} className=\"createGroup\">Зачувај промени</button>\n                                    )\n                                }\n                                {\n                                    novaGrupaMsg && (\n                                         <div className=\"msg\">\n                                            <p>{novaGrupaMsg}</p>\n                                        </div>\n                                    )\n                                }\n                            </div>\n                        </div>\n                    </div>\n                )\n            }\n        </div>\n    )\n}\n","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/pages/PrivateRoute.js",["165","166","167"],"import React, { useContext, useEffect, useState } from 'react'\nimport Account from '../components/Account'\nimport AuthContext from '../context/auth/AuthContext'\nimport Main from './Main'\nimport Loading from '../components/Loading'\n\nexport default function PrivateRoute() {\n    const { user, namestiNajavenKorisnik } = useContext(AuthContext);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        async function namestiKorisnik(token) {\n            const loggedIn = await namestiNajavenKorisnik(token);\n            setLoading(false);\n        }\n\n        let token = \"\";\n        if (typeof localStorage.token != \"undefined\") {\n            token = localStorage.token;\n        }\n\n        if (user) {\n            //vekje logiran\n        } else {\n            if (token.trim() != \"\") {\n                namestiKorisnik(token);\n            } else {\n                setLoading(false);\n            }\n        }\n    }, []);\n\n    return (\n        <div>\n        {\n            loading ? <Loading /> : user ? (\n                    <Main />\n                ) : (\n                <div className=\"account bg-primary\">\n                    <Account />\n                </div>\n                )\n            }\n        </div>\n    )\n}","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/auth/AuthState.js",["168","169","170"],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/auth/AuthContext.js",[],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/types.js",[],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/auth/AuthReducer.js",["171"],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/help/functions.js",["172","173","174"],"import axios from '../axios'\n\nexport const setToken = token => {\n    if (token) {\n        axios.defaults.headers.common['auth-token'] = token;\n\n    } else {\n        delete axios.defaults.headers.common[\"auth-token\"];\n    }\n}\n\n\nexport const zemiKorisnik = (userId, korisnici) => {\n    if (userId) {\n        return korisnici.filter(user => user._id == userId)[0];\n\n    } else {\n        return [];\n    }\n} \n\nexport const zemiSiteGrupi = (userId, grupi) => {\n    let tempGrupi = grupi.map(grupa => {\n        if (grupa.korisnici.includes(userId)) return grupa;\n    });\n\n    var sortiraniGrupi = tempGrupi.sort((a,b) => (a.poslednaPoraka < b.poslednaPoraka) ? 1 : ((b.poslednaPoraka < a.poslednaPoraka) ? -1 : 0));\n    \n    return sortiraniGrupi;\n}\n\nexport const zemiSitePoraki = (grupa, poraki) => {\n    if (poraki) {\n        return poraki.filter(poraka => poraka.grupa === grupa);\n    } else {\n        return [];\n    }\n}\n\nexport const zemiKorisnikPoraka = (isprakjac, korisnici) => {\n    if (isprakjac && korisnici) {\n        return korisnici.filter(korisnik => korisnik._id == isprakjac)[0];\n    } else {\n        return [];\n    }\n} ","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/axios.js",["175"],"import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: process.env.NODE_ENV == \"production\" ? \"https://dchat-backend.herokuapp.com/\" : \"http://localhost:5000/\"\n})\n\nexport default instance","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Loading.js",[],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/chat/chatState.js",["176","177","178","179","180"],"import React, { useReducer } from 'react'\nimport axios from '../../axios'\nimport ChatContext from './chatContext'\nimport chatReducer from './chatReducer'\nimport { izbrisanKorisnik } from '../../help/sockets'  \nimport {\n    SET_ERROR,\n    CLEAR_ERROR,\n    SUCCESS_ADD_MESSAGE,\n    SET_MESSAGES,\n    SET_GROUP,\n    SET_GROUPS,\n    SET_ACTIVE_MESSAGES,\n    ADD_NEW_GROUP,\n    UPDATE_GROUP,\n    SUCCESS_CHANGE_GROUP,\n    SET_NEW_GROUP,\n    SET_SEEN_MESSAGE,\n    SET_SEEN_GROUP,\n    SET_SEEN_SOCKET\n} from '../types'\nimport {setToken} from '../../help/functions'\n\nconst ChatState = props => {\n    const initState = {\n        error: null,\n        poraki: [],\n        grupa: null,\n        grupi: [],\n        aktivniPoraki: [],\n        osveziGrupi: false,\n        novaGrupa: false\n    }\n    const [state, dispatch] = useReducer(chatReducer, initState);\n\n    const namestiGrupa = (grupaId) => {\n        dispatch({\n            type: SET_GROUP,\n            payload: grupaId\n        })\n    }\n\n    const namestiNovaGrupa = (novaGrupa) => {\n        dispatch({\n            type: SET_NEW_GROUP,\n            payload: novaGrupa\n        })\n    }\n\n    const zemiPoraki = async (grupi) => {\n        try {\n            const res = await axios.get('/messages', {\n                params: {\n                    grupi\n                }\n            });\n\n            dispatch({\n                type: SET_MESSAGES,\n                payload: res.data.messages\n            })\n        } catch (err) {\n            dispatch({\n                type: SET_ERROR,\n                payload: err\n            })\n        }\n    }\n\n    const kreirajPoraka = async (poraka) => {\n        var { grupa, sodrzina, isprakjac } = poraka;\n\n        try {\n            const res = await axios.post('/messages', {\n                grupa, sodrzina, isprakjac\n            });\n            console.log(res.data.message._id);\n            dispatch({\n                type: UPDATE_GROUP,\n                payload: {grupa, isprakjac, sodrzina, id: res.data.message._id}\n            });\n        } catch (err) {\n        }\n    }\n\n    const namestiProcitanaGrupa = (grupa, korisnik) => {\n        dispatch({\n            type: SET_SEEN_GROUP,\n            payload: {grupa, korisnik}\n        })\n    }\n\n    const vmetniPoraka = async (poraka) => {\n        var { grupa, sodrzina, isprakjac } = poraka;\n        poraka.procitanoOd = [isprakjac];\n\n        dispatch({\n            type: SUCCESS_ADD_MESSAGE,\n            payload: poraka\n        })\n    }\n\n    const zemiGrupi = async (korisnici) => {\n        try {\n            const res = await axios.get('/groups', {\n                params: {\n                    korisnici\n                }\n            });\n\n            dispatch({\n                type: SET_GROUPS,\n                payload: res.data.grupi\n            })\n        } catch (err) {\n            dispatch({\n                type: SET_ERROR,\n                payload: err\n            })\n        }\n    }\n\n    const namestiAktivniPoraki = poraki => {\n        dispatch({\n            type: SET_ACTIVE_MESSAGES,\n            payload: poraki\n        })\n    }\n\n\n    const izmeniGrupa = async (grupaId, ime = null, korisnici = null, izbrisaniKorisnici = []) => {\n        try {\n            const res = await axios.post(`/groups/${grupaId}`, {\n                korisnici,\n                ime\n            })\n\n            if (izbrisaniKorisnici.length > 0) {\n                for (let izb = 0; izb < izbrisaniKorisnici.length; izb++) {\n                    izbrisanKorisnik(izbrisaniKorisnici[izb], grupaId);\n                }\n            }\n\n            dispatch({\n                type: SUCCESS_CHANGE_GROUP,\n                payload: res.data\n            })\n        } catch (err) {\n            // dispatch({\n            //     type: SET_ERROR,\n\n            // })\n        }\n    }\n\n    const dodajNovaGrupa = async (korisnici, ime) => {\n        try {\n            const res = await axios.post('/groups', {\n                korisnici,\n                ime\n            });\n\n            dispatch({\n                type: ADD_NEW_GROUP,\n                payload: res.data.grupa\n            })\n\n            return true;\n        } catch (err) {\n            let errorMsg = err.response.data.errors[0].msg;\n            alert(errorMsg);\n\n            return false;\n        }\n    }\n\n    const namestiProcitano = async (korisnik, poraka) => {\n        try {\n            const res = await axios.post(`/messages/${poraka}`, {\n                korisnik,\n                promenaPoraka: \"seen\"\n            });\n        \n            dispatch({\n                type: SET_SEEN_MESSAGE,\n                payload: {\n                    korisnik, poraka\n                }\n            })\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    const procitanaPorakaKorisnik = (grupa, korisnik) => {\n        console.log('procitana poraka korisnik: ');\n        console.log(grupa, korisnik);\n\n        dispatch({\n            type: SET_SEEN_SOCKET,\n            payload: {\n                grupa, korisnik\n            }\n        })\n    }\n\n\n    return (\n        <ChatContext.Provider value={{\n            zemiPoraki,\n            namestiGrupa,\n            kreirajPoraka,\n            zemiGrupi,\n            namestiAktivniPoraki,\n            vmetniPoraka,\n            dodajNovaGrupa,\n            izmeniGrupa,\n            namestiNovaGrupa,\n            namestiProcitano,\n            namestiProcitanaGrupa,\n            procitanaPorakaKorisnik,\n            error: state.error,\n            poraki: state.poraki,\n            grupa: state.grupa,\n            grupi: state.grupi,\n            osveziGrupi: state.osveziGrupi,\n            aktivniPoraki: state.aktivniPoraki,\n            novaGrupa: state.novaGrupa\n        }}>\n            {props.children}\n        </ChatContext.Provider>\n    )\n}\n\nexport default ChatState","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/chat/chatContext.js",[],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/chat/chatReducer.js",["181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200"],"import {\n    SET_ERROR,\n    CLEAR_ERROR,\n    SUCCESS_ADD_MESSAGE,\n    SET_MESSAGES,\n    SET_GROUP,\n    SET_GROUPS,\n    SET_ACTIVE_MESSAGES,\n    ADD_NEW_GROUP,\n    UPDATE_GROUP,\n    SUCCESS_CHANGE_GROUP,\n    SET_NEW_GROUP,\n    SUCCESS_DELETE_MESSAGE,\n    SET_SEEN_MESSAGE,\n    SET_SEEN_GROUP,\n    SET_SEEN_SOCKET\n} from '../types'\n\nexport default (state, action) => {\n    switch (action.type) {\n        case SET_GROUP:\n            return {\n                ...state,\n                grupa: action.payload\n            }\n        case SET_GROUPS:\n            const sortiraniGrupi = action.payload.sort((a,b) => (a.poslednaPoraka < b.poslednaPoraka) ? 1 : ((b.poslednaPoraka < a.poslednaPoraka) ? -1 : 0));\n            return {\n                ...state,\n                grupi: sortiraniGrupi,\n                osveziGrupi: false\n            }\n        case UPDATE_GROUP:\n            var grupiPredUpdate = state.grupi;\n\n            for (let i = 0; i < grupiPredUpdate.length; i++) {\n                if (grupiPredUpdate[i]._id == action.payload.grupa) {\n                    grupiPredUpdate[i].poslednaPoraka = new Date().getTime();\n                }\n            }\n\n            const sortiraniGrupiUpdate = grupiPredUpdate.sort((a,b) => (a.poslednaPoraka < b.poslednaPoraka) ? 1 : ((b.poslednaPoraka < a.poslednaPoraka) ? -1 : 0));\n\n            const porakiSoNajnovaId = state.poraki.map(poraka => {\n                if (!poraka._id) {\n                    console.log('nema id');\n                    if (poraka.isprakjac == action.payload.isprakjac && action.payload.sodrzina == poraka.sodrzina) {\n                        console.log('isto e se');\n\n                        poraka._id = action.payload.id;\n                    }\n                }\n\n                return poraka;\n            })\n\n            return {\n                ...state,\n                poraki: porakiSoNajnovaId,\n                grupi: sortiraniGrupiUpdate\n            }\n        case SUCCESS_CHANGE_GROUP:\n            // console.log(action.payload);\n            let promenetiGrupi = state.grupi.map(grupa => {\n                if (grupa._id == action.payload._id) {\n                    grupa = action.payload;\n                }\n\n                return grupa;\n            })\n\n            // console.log(promenetiGrupi);\n            return {\n                ...state,\n                grupi: promenetiGrupi,\n                grupa: action.payload\n            }\n        case ADD_NEW_GROUP:\n            return {\n                ...state,\n                grupi: [...state.grupi, action.payload],\n                grupa: action.payload,\n                aktivniPoraki: []\n            }\n        case SUCCESS_ADD_MESSAGE: \n        var grupiPredUpdate1 = state.grupi;\n\n        var grupaInfo = grupiPredUpdate1.filter(r => r._id == action.payload.grupa);\n\n        var osveziGrupi = false;\n        if (grupaInfo.length == 0) {\n            osveziGrupi=true;\n        }\n\n            for (let i = 0; i < grupiPredUpdate1.length; i++) {\n                if (grupiPredUpdate1[i]._id == action.payload.grupa) {\n                    grupiPredUpdate1[i].poslednaPoraka = new Date().getTime();\n                }\n            }\n\n            const sortiraniGrupiPredUpdate = grupiPredUpdate1.sort((a,b) => (a.poslednaPoraka < b.poslednaPoraka) ? 1 : ((b.poslednaPoraka < a.poslednaPoraka) ? -1 : 0));\n\n        return {\n            ...state,\n            poraki: [...state.poraki, action.payload],\n            aktivniPoraki: [...state.aktivniPoraki, action.payload],\n            error: null,\n            grupi: sortiraniGrupiPredUpdate,\n            osveziGrupi\n        }\n     \n        case SET_NEW_GROUP:\n            return {\n                ...state,\n                novaGrupa: action.payload\n            }\n        break;\n        case SET_MESSAGES:\n           \n            return {\n                ...state,\n                poraki: action.payload,\n                error: null\n            }\n        case SET_ERROR:\n            return {\n                ...state,\n                error: action.payload\n            }\n        case CLEAR_ERROR:\n            return {\n                ...state,\n                error: null\n            }\n        case SET_ACTIVE_MESSAGES:\n            return {\n                ...state,\n                aktivniPoraki: action.payload\n            }\n        case SET_SEEN_MESSAGE:\n            let porakiSoSeen = state.poraki;\n            let aktivniSoSeen = state.aktivniPoraki;\n            porakiSoSeen = porakiSoSeen.map(poraka => {\n                if (poraka._id == action.payload.poraka) {\n                    poraka.procitanoOd.push(action.payload.korisnik);\n                }\n\n                return poraka;\n            });\n\n            aktivniSoSeen = aktivniSoSeen.map(poraka => {\n                if (poraka._id == action.payload.poraka) {\n                    poraka.procitanoOd.push(action.payload.korisnik);\n                }\n\n                return poraka;\n            });\n            let promeniGrupi = state.grupi;\n\n            promeniGrupi = promeniGrupi.map(grupa => {\n                if (grupa.korisnici.includes(action.payload.korisnik)) {\n                    grupa.promeni = !grupa.promeni;\n                }\n\n                return grupa;\n            })\n\n            return {\n                ...state,\n                poraki: porakiSoSeen,\n                aktivniPoraki: aktivniSoSeen,\n                grupi: promeniGrupi\n            }\n        case SET_SEEN_SOCKET:\n            let procitaniPorakiSocket = state.poraki;\n            let aProcitaniPorakiSocket = state.aktivniPoraki;\n\n            procitaniPorakiSocket = procitaniPorakiSocket.map(poraka => {\n                if (poraka.grupa == action.payload.grupa) {\n                    if (poraka.procitanoOd.includes(action.payload.korisnik) == false) {\n                        poraka.procitanoOd.push(action.payload.korisnik);\n                    }\n                }\n                return poraka;\n            });\n\n            aProcitaniPorakiSocket = aProcitaniPorakiSocket.map(poraka => {\n                if (poraka.grupa == action.payload.grupa) {\n                    if (poraka.procitanoOd.includes(action.payload.korisnik) == false) {\n                        poraka.procitanoOd.push(action.payload.korisnik);\n                    }\n                }\n                return poraka;\n            });\n\n            return {\n                ...state,\n                poraki: procitaniPorakiSocket,\n                aktivniPoraki: aProcitaniPorakiSocket\n            }\n        break;\n        case SET_SEEN_GROUP:\n            let procitaniPoraki = state.poraki;\n            let procitaniAktivniPoraki = state.aktivniPoraki;\n\n            procitaniPoraki = procitaniPoraki.map(poraka => {\n                if (poraka.grupa == action.payload.grupa) {\n                    if (poraka.procitanoOd && !poraka.procitanoOd.includes(action.payload.korisnik)) {\n                        //ne e procitana\n                        poraka.procitanoOd.push(action.payload.korisnik);\n                    } else {\n                        console.log('ili e procitana ili nema procitanoOd');\n                    }\n                }\n\n                return poraka;\n            })\n\n            procitaniAktivniPoraki = procitaniAktivniPoraki.map(poraka => {\n                if (poraka.grupa == action.payload.grupa) {\n                    if (poraka.procitanoOd && !poraka.procitanoOd.includes(action.payload.korisnik)) {\n                        //ne e procitana\n                        poraka.procitanoOd.push(action.payload.korisnik);\n                    } else {\n                        console.log('ili e procitana ili nema procitanoOd');\n                    }\n                }\n\n                return poraka;\n            })\n\n            return {\n                ...state,\n                poraki: procitaniPoraki,\n                aktivniPoraki: procitaniAktivniPoraki\n            }\n        break;\n        default:\n            return state;\n    }\n}","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/help/sockets.js",["201"],"import io from 'socket.io-client';\n\nlet socket;\nexport const inicijalizirajSocket = (grupa) => {\n  socket = io(process.env.NODE_ENV == \"production\" ? \"https://dchat-backend.herokuapp.com/\" : 'http://localhost:8000/');\n}\nexport const diskonektirajSocket = () => {\n  if(socket) socket.disconnect();\n}\nexport const pretplataChat = (cbNovaPoraka, cbProcitanaPoraka, cbIzbrisanKorisnik) => {\n  if (!socket) return(true);\n  socket.on('nacrtajPoraka', (sodrzina, grupa, isprakjac) => {\n   console.log('nova poraka: ' + sodrzina);\n    return cbNovaPoraka({\n      grupa, sodrzina, isprakjac\n    });\n  });\n\n  socket.on(\"seenPoraka\", (grupa, korisnik) => {\n    cbProcitanaPoraka(grupa, korisnik);\n  })\n\n   socket.on('izbrisanKorisnikServer', (grupa) => {\n    socket.emit('izbrisanKorisnikClient', grupa);\n\n    cbIzbrisanKorisnik();\n  });\n}\n\nexport const izbrisanKorisnik = (korisnik, grupa) => {\n  socket.emit(\"izbrisanKorisnik\", korisnik, grupa);\n}\n\n\nexport const procitanoSocket = (grupa, korisnik, cb = null) => {\n  socket.emit(\"seen\", grupa, korisnik);\n  if (cb) {\n    cb();\n  }\n}\n\nexport const vleziVoGrupi = (grupi, userId) => {\n  if (grupi) {\n    if (socket) {\n      let tempGrupi = grupi.map(grupa=>grupa._id);\n      \n      socket.emit('join', tempGrupi, userId);\n    }\n  }\n}\n\nexport const ispratiPorakaSocket = (grupa, poraka, isprakjac, cb = null, korisnici=[], novaGrupa = false) => {\n  console.log(grupa);\n  if (socket) {\n    socket.emit('novaPoraka', { poraka, grupa, isprakjac, korisniciPoraka: korisnici, novaGrupa });\n    cb({\n      sodrzina: poraka,\n      grupa, isprakjac\n    });\n  }\n}",{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","severity":1,"message":"207","line":1,"column":17,"nodeType":"208","messageId":"209","endLine":1,"endColumn":26},{"ruleId":"206","severity":1,"message":"210","line":6,"column":47,"nodeType":"208","messageId":"209","endLine":6,"endColumn":55},{"ruleId":"206","severity":1,"message":"211","line":30,"column":15,"nodeType":"208","messageId":"209","endLine":30,"endColumn":22},{"ruleId":"206","severity":1,"message":"212","line":45,"column":15,"nodeType":"208","messageId":"209","endLine":45,"endColumn":26},{"ruleId":"213","severity":1,"message":"214","line":63,"column":33,"nodeType":"215","endLine":63,"endColumn":116},{"ruleId":"213","severity":1,"message":"214","line":80,"column":37,"nodeType":"215","endLine":80,"endColumn":119},{"ruleId":"206","severity":1,"message":"216","line":12,"column":12,"nodeType":"208","messageId":"209","endLine":12,"endColumn":17},{"ruleId":"206","severity":1,"message":"217","line":12,"column":19,"nodeType":"208","messageId":"209","endLine":12,"endColumn":27},{"ruleId":"206","severity":1,"message":"218","line":14,"column":20,"nodeType":"208","messageId":"209","endLine":14,"endColumn":25},{"ruleId":"206","severity":1,"message":"219","line":15,"column":42,"nodeType":"208","messageId":"209","endLine":15,"endColumn":53},{"ruleId":"220","severity":1,"message":"221","line":28,"column":8,"nodeType":"222","endLine":28,"endColumn":10,"suggestions":"223"},{"ruleId":"206","severity":1,"message":"224","line":32,"column":19,"nodeType":"208","messageId":"209","endLine":32,"endColumn":24},{"ruleId":"220","severity":1,"message":"225","line":37,"column":8,"nodeType":"222","endLine":37,"endColumn":10,"suggestions":"226"},{"ruleId":"220","severity":1,"message":"225","line":49,"column":8,"nodeType":"222","endLine":49,"endColumn":21,"suggestions":"227"},{"ruleId":"228","severity":1,"message":"229","line":52,"column":35,"nodeType":"230","messageId":"231","endLine":52,"endColumn":37},{"ruleId":"228","severity":1,"message":"232","line":60,"column":88,"nodeType":"230","messageId":"231","endLine":60,"endColumn":90},{"ruleId":"220","severity":1,"message":"233","line":76,"column":8,"nodeType":"222","endLine":76,"endColumn":15,"suggestions":"234"},{"ruleId":"206","severity":1,"message":"235","line":37,"column":13,"nodeType":"208","messageId":"209","endLine":37,"endColumn":18},{"ruleId":"228","severity":1,"message":"229","line":100,"column":52,"nodeType":"230","messageId":"231","endLine":100,"endColumn":54},{"ruleId":"228","severity":1,"message":"229","line":36,"column":50,"nodeType":"230","messageId":"231","endLine":36,"endColumn":52},{"ruleId":"228","severity":1,"message":"232","line":37,"column":96,"nodeType":"230","messageId":"231","endLine":37,"endColumn":98},{"ruleId":"228","severity":1,"message":"232","line":39,"column":40,"nodeType":"230","messageId":"231","endLine":39,"endColumn":42},{"ruleId":"220","severity":1,"message":"236","line":49,"column":8,"nodeType":"222","endLine":49,"endColumn":37,"suggestions":"237"},{"ruleId":"228","severity":1,"message":"232","line":54,"column":49,"nodeType":"230","messageId":"231","endLine":54,"endColumn":51},{"ruleId":"228","severity":1,"message":"229","line":69,"column":85,"nodeType":"230","messageId":"231","endLine":69,"endColumn":87},{"ruleId":"228","severity":1,"message":"229","line":114,"column":76,"nodeType":"230","messageId":"231","endLine":114,"endColumn":78},{"ruleId":"238","severity":1,"message":"239","line":133,"column":37,"nodeType":"240","messageId":"241","endLine":133,"endColumn":39},{"ruleId":"228","severity":1,"message":"229","line":146,"column":52,"nodeType":"230","messageId":"231","endLine":146,"endColumn":54},{"ruleId":"228","severity":1,"message":"232","line":158,"column":207,"nodeType":"230","messageId":"231","endLine":158,"endColumn":209},{"ruleId":"206","severity":1,"message":"242","line":23,"column":13,"nodeType":"208","messageId":"209","endLine":23,"endColumn":23},{"ruleId":"206","severity":1,"message":"243","line":23,"column":51,"nodeType":"208","messageId":"209","endLine":23,"endColumn":57},{"ruleId":"228","severity":1,"message":"229","line":36,"column":29,"nodeType":"230","messageId":"231","endLine":36,"endColumn":31},{"ruleId":"228","severity":1,"message":"229","line":46,"column":27,"nodeType":"230","messageId":"231","endLine":46,"endColumn":29},{"ruleId":"228","severity":1,"message":"232","line":48,"column":38,"nodeType":"230","messageId":"231","endLine":48,"endColumn":40},{"ruleId":"228","severity":1,"message":"232","line":48,"column":56,"nodeType":"230","messageId":"231","endLine":48,"endColumn":58},{"ruleId":"228","severity":1,"message":"229","line":63,"column":31,"nodeType":"230","messageId":"231","endLine":63,"endColumn":33},{"ruleId":"228","severity":1,"message":"232","line":117,"column":87,"nodeType":"230","messageId":"231","endLine":117,"endColumn":89},{"ruleId":"228","severity":1,"message":"232","line":120,"column":87,"nodeType":"230","messageId":"231","endLine":120,"endColumn":89},{"ruleId":"228","severity":1,"message":"232","line":127,"column":25,"nodeType":"230","messageId":"231","endLine":127,"endColumn":27},{"ruleId":"228","severity":1,"message":"232","line":135,"column":25,"nodeType":"230","messageId":"231","endLine":135,"endColumn":27},{"ruleId":"244","severity":1,"message":"245","line":138,"column":122,"nodeType":"246","endLine":138,"endColumn":169},{"ruleId":"206","severity":1,"message":"247","line":1,"column":17,"nodeType":"208","messageId":"209","endLine":1,"endColumn":25},{"ruleId":"206","severity":1,"message":"248","line":11,"column":11,"nodeType":"208","messageId":"209","endLine":11,"endColumn":25},{"ruleId":"238","severity":1,"message":"239","line":25,"column":57,"nodeType":"240","messageId":"241","endLine":25,"endColumn":59},{"ruleId":"228","severity":1,"message":"229","line":32,"column":98,"nodeType":"230","messageId":"231","endLine":32,"endColumn":100},{"ruleId":"206","severity":1,"message":"249","line":36,"column":33,"nodeType":"208","messageId":"209","endLine":36,"endColumn":46},{"ruleId":"228","severity":1,"message":"232","line":46,"column":74,"nodeType":"230","messageId":"231","endLine":46,"endColumn":76},{"ruleId":"228","severity":1,"message":"232","line":51,"column":42,"nodeType":"230","messageId":"231","endLine":51,"endColumn":44},{"ruleId":"228","severity":1,"message":"232","line":52,"column":38,"nodeType":"230","messageId":"231","endLine":52,"endColumn":40},{"ruleId":"244","severity":1,"message":"245","line":56,"column":124,"nodeType":"246","endLine":56,"endColumn":133},{"ruleId":"228","severity":1,"message":"232","line":64,"column":58,"nodeType":"230","messageId":"231","endLine":64,"endColumn":60},{"ruleId":"228","severity":1,"message":"229","line":64,"column":108,"nodeType":"230","messageId":"231","endLine":64,"endColumn":110},{"ruleId":"206","severity":1,"message":"250","line":8,"column":10,"nodeType":"208","messageId":"209","endLine":8,"endColumn":26},{"ruleId":"228","severity":1,"message":"229","line":28,"column":50,"nodeType":"230","messageId":"231","endLine":28,"endColumn":52},{"ruleId":"228","severity":1,"message":"232","line":29,"column":97,"nodeType":"230","messageId":"231","endLine":29,"endColumn":99},{"ruleId":"228","severity":1,"message":"232","line":31,"column":41,"nodeType":"230","messageId":"231","endLine":31,"endColumn":43},{"ruleId":"220","severity":1,"message":"236","line":41,"column":8,"nodeType":"222","endLine":41,"endColumn":37,"suggestions":"251"},{"ruleId":"228","severity":1,"message":"232","line":51,"column":44,"nodeType":"230","messageId":"231","endLine":51,"endColumn":46},{"ruleId":"220","severity":1,"message":"252","line":65,"column":8,"nodeType":"222","endLine":65,"endColumn":15,"suggestions":"253"},{"ruleId":"228","severity":1,"message":"229","line":68,"column":77,"nodeType":"230","messageId":"231","endLine":68,"endColumn":79},{"ruleId":"228","severity":1,"message":"232","line":87,"column":40,"nodeType":"230","messageId":"231","endLine":87,"endColumn":42},{"ruleId":"228","severity":1,"message":"232","line":92,"column":25,"nodeType":"230","messageId":"231","endLine":92,"endColumn":27},{"ruleId":"228","severity":1,"message":"229","line":142,"column":77,"nodeType":"230","messageId":"231","endLine":142,"endColumn":79},{"ruleId":"228","severity":1,"message":"229","line":166,"column":76,"nodeType":"230","messageId":"231","endLine":166,"endColumn":78},{"ruleId":"206","severity":1,"message":"254","line":13,"column":19,"nodeType":"208","messageId":"209","endLine":13,"endColumn":27},{"ruleId":"228","severity":1,"message":"229","line":25,"column":30,"nodeType":"230","messageId":"231","endLine":25,"endColumn":32},{"ruleId":"220","severity":1,"message":"255","line":31,"column":8,"nodeType":"222","endLine":31,"endColumn":10,"suggestions":"256"},{"ruleId":"206","severity":1,"message":"257","line":6,"column":127,"nodeType":"208","messageId":"209","endLine":6,"endColumn":138},{"ruleId":"228","severity":1,"message":"232","line":66,"column":53,"nodeType":"230","messageId":"231","endLine":66,"endColumn":55},{"ruleId":"206","severity":1,"message":"258","line":161,"column":19,"nodeType":"208","messageId":"209","endLine":161,"endColumn":22},{"ruleId":"259","severity":1,"message":"260","line":3,"column":1,"nodeType":"261","endLine":95,"endColumn":2},{"ruleId":"228","severity":1,"message":"232","line":15,"column":50,"nodeType":"230","messageId":"231","endLine":15,"endColumn":52},{"ruleId":"238","severity":1,"message":"239","line":23,"column":37,"nodeType":"240","messageId":"241","endLine":23,"endColumn":39},{"ruleId":"228","severity":1,"message":"232","line":42,"column":58,"nodeType":"230","messageId":"231","endLine":42,"endColumn":60},{"ruleId":"228","severity":1,"message":"232","line":4,"column":35,"nodeType":"230","messageId":"231","endLine":4,"endColumn":37},{"ruleId":"206","severity":1,"message":"257","line":8,"column":5,"nodeType":"208","messageId":"209","endLine":8,"endColumn":16},{"ruleId":"206","severity":1,"message":"262","line":22,"column":9,"nodeType":"208","messageId":"209","endLine":22,"endColumn":17},{"ruleId":"206","severity":1,"message":"218","line":94,"column":15,"nodeType":"208","messageId":"209","endLine":94,"endColumn":20},{"ruleId":"206","severity":1,"message":"263","line":94,"column":22,"nodeType":"208","messageId":"209","endLine":94,"endColumn":30},{"ruleId":"206","severity":1,"message":"258","line":179,"column":19,"nodeType":"208","messageId":"209","endLine":179,"endColumn":22},{"ruleId":"206","severity":1,"message":"264","line":13,"column":5,"nodeType":"208","messageId":"209","endLine":13,"endColumn":27},{"ruleId":"259","severity":1,"message":"260","line":19,"column":1,"nodeType":"261","endLine":241,"endColumn":2},{"ruleId":"228","severity":1,"message":"232","line":37,"column":44,"nodeType":"230","messageId":"231","endLine":37,"endColumn":46},{"ruleId":"228","severity":1,"message":"232","line":47,"column":42,"nodeType":"230","messageId":"231","endLine":47,"endColumn":44},{"ruleId":"228","severity":1,"message":"232","line":47,"column":97,"nodeType":"230","messageId":"231","endLine":47,"endColumn":99},{"ruleId":"228","severity":1,"message":"232","line":65,"column":31,"nodeType":"230","messageId":"231","endLine":65,"endColumn":33},{"ruleId":"228","severity":1,"message":"232","line":88,"column":60,"nodeType":"230","messageId":"231","endLine":88,"endColumn":62},{"ruleId":"228","severity":1,"message":"232","line":91,"column":30,"nodeType":"230","messageId":"231","endLine":91,"endColumn":32},{"ruleId":"228","severity":1,"message":"232","line":96,"column":45,"nodeType":"230","messageId":"231","endLine":96,"endColumn":47},{"ruleId":"265","severity":1,"message":"266","line":117,"column":9,"nodeType":"267","messageId":"268","endLine":117,"endColumn":15},{"ruleId":"228","severity":1,"message":"232","line":144,"column":32,"nodeType":"230","messageId":"231","endLine":144,"endColumn":34},{"ruleId":"228","severity":1,"message":"232","line":152,"column":32,"nodeType":"230","messageId":"231","endLine":152,"endColumn":34},{"ruleId":"228","severity":1,"message":"232","line":179,"column":34,"nodeType":"230","messageId":"231","endLine":179,"endColumn":36},{"ruleId":"228","severity":1,"message":"232","line":180,"column":78,"nodeType":"230","messageId":"231","endLine":180,"endColumn":80},{"ruleId":"228","severity":1,"message":"232","line":188,"column":34,"nodeType":"230","messageId":"231","endLine":188,"endColumn":36},{"ruleId":"228","severity":1,"message":"232","line":189,"column":78,"nodeType":"230","messageId":"231","endLine":189,"endColumn":80},{"ruleId":"265","severity":1,"message":"266","line":201,"column":9,"nodeType":"267","messageId":"268","endLine":201,"endColumn":15},{"ruleId":"228","severity":1,"message":"232","line":207,"column":34,"nodeType":"230","messageId":"231","endLine":207,"endColumn":36},{"ruleId":"228","severity":1,"message":"232","line":220,"column":34,"nodeType":"230","messageId":"231","endLine":220,"endColumn":36},{"ruleId":"265","severity":1,"message":"266","line":237,"column":9,"nodeType":"267","messageId":"268","endLine":237,"endColumn":15},{"ruleId":"228","severity":1,"message":"232","line":5,"column":36,"nodeType":"230","messageId":"231","endLine":5,"endColumn":38},"no-native-reassign",["269"],"no-negated-in-lhs",["270"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setError' is assigned a value but never used.","'logiran' is assigned a value but never used.","'registriran' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'chats' is assigned a value but never used.","'setChats' is assigned a value but never used.","'grupa' is assigned a value but never used.","'setChanging' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'namestiAktivniPoraki', 'namestiGrupa', 'procitanaPorakaKorisnik', 'user._id', 'vmetniPoraka', and 'zemiGrupi'. Either include them or remove the dependency array.","ArrayExpression",["271"],"'grupi' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'user._id' and 'zemiGrupi'. Either include them or remove the dependency array.",["272"],["273"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'citajKorisnici', 'user._id', and 'zemiPoraki'. Either include them or remove the dependency array.",["274"],"'saved' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'tempKorisnici'. Either include it or remove the dependency array.",["275"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'zemiPoraki' is assigned a value but never used.","'poraki' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useState' is defined but never used.","'messagesEndRef' is assigned a value but never used.","'korisniciNovi' is assigned a value but never used.","'izbrisanKorisnik' is defined but never used.",["276"],"React Hook useEffect has a missing dependency: 'users'. Either include it or remove the dependency array.",["277"],"'loggedIn' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'namestiNajavenKorisnik' and 'user'. Either include them or remove the dependency array.",["278"],"'CLEAR_ERROR' is defined but never used.","'res' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'setToken' is defined but never used.","'sodrzina' is assigned a value but never used.","'SUCCESS_DELETE_MESSAGE' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","no-global-assign","no-unsafe-negation",{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"287","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},"Update the dependencies array to be: [namestiAktivniPoraki, namestiGrupa, procitanaPorakaKorisnik, user._id, vmetniPoraka, zemiGrupi]",{"range":"294","text":"295"},"Update the dependencies array to be: [user._id, zemiGrupi]",{"range":"296","text":"297"},"Update the dependencies array to be: [osveziGrupi, user._id, zemiGrupi]",{"range":"298","text":"299"},"Update the dependencies array to be: [citajKorisnici, grupi, user._id, zemiPoraki]",{"range":"300","text":"301"},"Update the dependencies array to be: [poslednoDodadenMail, change, tempKorisnici]",{"range":"302","text":"303"},{"range":"304","text":"303"},"Update the dependencies array to be: [grupa, users]",{"range":"305","text":"306"},"Update the dependencies array to be: [namestiNajavenKorisnik, user]",{"range":"307","text":"308"},[1120,1122],"[namestiAktivniPoraki, namestiGrupa, procitanaPorakaKorisnik, user._id, vmetniPoraka, zemiGrupi]",[1288,1290],"[user._id, zemiGrupi]",[1589,1602],"[osveziGrupi, user._id, zemiGrupi]",[2480,2487],"[citajKorisnici, grupi, user._id, zemiPoraki]",[1764,1793],"[poslednoDodadenMail, change, tempKorisnici]",[1551,1580],[2314,2321],"[grupa, users]",[933,935],"[namestiNajavenKorisnik, user]"]