[{"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/index.js":"1","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/App.js":"2","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Account.js":"3","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/pages/Main.js":"4","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/TopMenu.js":"5"},{"size":197,"mtime":1608465200416,"results":"6","hashOfConfig":"7"},{"size":342,"mtime":1608486438620,"results":"8","hashOfConfig":"7"},{"size":3099,"mtime":1608466980896,"results":"9","hashOfConfig":"7"},{"size":277,"mtime":1608486103533,"results":"10","hashOfConfig":"7"},{"size":4742,"mtime":1608486025363,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"re2ht2",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/index.js",[],["24","25"],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/App.js",["26"],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Account.js",["27","28","29","30"],"import React, { useState } from 'react'\n\nexport default function Account() {\n     //Login promenlivi:\n     const [email, setEmail] = useState(\"\");\n     const [password, setPassword] = useState(\"\");\n \n     //Register promenlivi:\n     const [fname, setFname] = useState(\"\");\n     const [lname, setLname] = useState(\"\");\n     const [phone, setPhone] = useState(\"\");\n     const [emailRegister, setEmailRegister] = useState(\"\");\n     const [passwordRegister, setPasswordRegister] = useState(\"\");\n\n    // koj screen da se prikazi:\n    const [loginForm, setLoginForm] = useState(true);\n\n    // najavi se\n    const submitLogin = async (e) => {\n        e.preventDefault();\n        const user = {\n            email,\n            password\n        }\n    }\n\n    //registriraj se\n    const submitRegister = async (e) => {\n        e.preventDefault();\n\n        const user = {\n            email: emailRegister,\n            password: passwordRegister,\n            fname,\n            lname,\n            phone\n        }\n    }\n\n    return (\n        <div className=\"account-form\">\n            <div className=\"account-form__header\">\n                <h2>{loginForm ? 'Најави се' : 'Регистрација'}</h2>\n            </div>\n            <div className=\"account-form__inner\">\n                {\n                    loginForm ? (\n                        <form onSubmit={submitLogin}>\n                            <input value={email} onChange={(e) => setEmail(e.target.value)} placeholder=\"Е-mail адреса\" type=\"text\" />\n                            <input value={password} onChange={(e) => setPassword(e.target.value)} placeholder=\"Лозинка\" type=\"password\" />\n                            <button type=\"submit\">Најава</button>\n\n                            <a className=\"pointer hover-text-primary\" onClick={() => { setLoginForm(false); }}>Регистрирај се</a>\n                        </form>) : (\n                            <form onSubmit={submitRegister}>\n                                <input value={fname} onChange={(e) => setFname(e.target.value)} placeholder=\"Вашето име\" type=\"text\" />\n                                <input value={lname} onChange={(e) => setLname(e.target.value)} placeholder=\"Вашето презиме\" type=\"text\" />\n                                <input value={phone} onChange={(e) => setPhone(e.target.value)} placeholder=\"Телефонски број\" type=\"text\" />\n                                <input value={emailRegister} onChange={(e) => setEmailRegister(e.target.value)} placeholder=\"Е-mail адреса\" type=\"text\" />\n                                <input value={passwordRegister} onChange={(e) => setPasswordRegister(e.target.value)} placeholder=\"Лозинка\" type=\"password\" />\n                                <button type=\"submit\">Регистрирај се</button>\n                                <a className=\"pointer hover-text-primary\" onClick={() => { setLoginForm(true); }}>Најава</a>\n                            </form>\n                        )\n                }\n            </div>\n        </div>\n    )\n}\n","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/pages/Main.js",[],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/TopMenu.js",["31","32"],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":3,"column":8,"nodeType":"39","messageId":"40","endLine":3,"endColumn":15},{"ruleId":"37","severity":1,"message":"41","line":21,"column":15,"nodeType":"39","messageId":"40","endLine":21,"endColumn":19},{"ruleId":"37","severity":1,"message":"41","line":31,"column":15,"nodeType":"39","messageId":"40","endLine":31,"endColumn":19},{"ruleId":"42","severity":1,"message":"43","line":53,"column":29,"nodeType":"44","endLine":53,"endColumn":112},{"ruleId":"42","severity":1,"message":"43","line":62,"column":33,"nodeType":"44","endLine":62,"endColumn":115},{"ruleId":"37","severity":1,"message":"45","line":11,"column":24,"nodeType":"39","messageId":"40","endLine":11,"endColumn":37},{"ruleId":"37","severity":1,"message":"46","line":12,"column":23,"nodeType":"39","messageId":"40","endLine":12,"endColumn":35},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'Account' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setLoadingBtn' is assigned a value but never used.","'setPasswords' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]