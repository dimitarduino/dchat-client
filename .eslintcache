[{"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/index.js":"1","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/App.js":"2","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Account.js":"3","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/pages/Main.js":"4","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/TopMenu.js":"5","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/ChatSide.js":"6","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/ChatRight.js":"7","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Messages.js":"8","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Members.js":"9","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/pages/PrivateRoute.js":"10","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/auth/AuthState.js":"11","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/auth/AuthContext.js":"12","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/types.js":"13","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/auth/AuthReducer.js":"14","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/help/functions.js":"15","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/axios.js":"16","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Loading.js":"17","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/chat/chatState.js":"18","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/chat/chatContext.js":"19","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/chat/chatReducer.js":"20","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/help/sockets.js":"21"},{"size":197,"mtime":1608465200416,"results":"22","hashOfConfig":"23"},{"size":478,"mtime":1609802119539,"results":"24","hashOfConfig":"23"},{"size":4382,"mtime":1609100471078,"results":"25","hashOfConfig":"23"},{"size":2498,"mtime":1609679669363,"results":"26","hashOfConfig":"23"},{"size":5164,"mtime":1609362551147,"results":"27","hashOfConfig":"23"},{"size":7984,"mtime":1609540515966,"results":"28","hashOfConfig":"23"},{"size":4796,"mtime":1609682809134,"results":"29","hashOfConfig":"23"},{"size":2094,"mtime":1609670965965,"results":"30","hashOfConfig":"23"},{"size":6293,"mtime":1609682712577,"results":"31","hashOfConfig":"23"},{"size":1234,"mtime":1609091900120,"results":"32","hashOfConfig":"23"},{"size":6105,"mtime":1609683573190,"results":"33","hashOfConfig":"23"},{"size":104,"mtime":1609091365557,"results":"34","hashOfConfig":"23"},{"size":1183,"mtime":1609220722281,"results":"35","hashOfConfig":"23"},{"size":2681,"mtime":1609683652664,"results":"36","hashOfConfig":"23"},{"size":1129,"mtime":1609681323847,"results":"37","hashOfConfig":"23"},{"size":194,"mtime":1609801842075,"results":"38","hashOfConfig":"23"},{"size":230,"mtime":1609091685270,"results":"39","hashOfConfig":"23"},{"size":4469,"mtime":1609618561038,"results":"40","hashOfConfig":"23"},{"size":104,"mtime":1609219721518,"results":"41","hashOfConfig":"23"},{"size":3733,"mtime":1609618575401,"results":"42","hashOfConfig":"23"},{"size":1047,"mtime":1609801851445,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"k1i8r1",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"46"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/index.js",[],["100","101"],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/App.js",[],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Account.js",["102","103","104","105","106"],"import React, { useState, useContext } from 'react'\nimport AuthContext from '../context/auth/AuthContext';\n\nexport default function Account() {\n    //context promenlivi\n    const { logirajSe, registrirajSe, errors, setError, sepromenuvaLozinka } = useContext(AuthContext);\n\n    //Login promenlivi:\n    const [email, setEmail] = useState(\"\");\n    const [lozinka, namestiLozinka] = useState(\"\");\n\n    //Register promenlivi:\n    const [ime, namestiIme] = useState(\"\");\n    const [prezime, namestiPrezime] = useState(\"\");\n    const [telefon, namestiTelefon] = useState(\"\");\n    const [emailRegister, setEmailRegister] = useState(\"\");\n    const [passwordRegister, setPasswordRegister] = useState(\"\");\n\n    // koj screen da se prikazi:\n    const [loginForm, setLoginForm] = useState(true);\n\n    // najavi se\n    const submitLogin = async (e) => {\n        e.preventDefault();\n        const user = {\n            email,\n            lozinka\n        }\n\n        const logiran = await logirajSe(user);\n    }\n\n    //registriraj se\n    const submitRegister = async (e) => {\n        e.preventDefault();\n\n        const user = {\n            email: emailRegister,\n            lozinka: passwordRegister,\n            ime,\n            prezime,\n            telefon\n        }\n\n        const registriran = await registrirajSe(user);\n\n    }\n\n    if (sepromenuvaLozinka === false) {\n        return (\n            <div className=\"account-form\">\n                <div className=\"account-form__header\">\n                    <h2>{loginForm ? 'Најави се' : 'Регистрација'}</h2>\n                </div>\n                <div className=\"account-form__inner\">\n                    {\n                        loginForm ? (\n                            <form onSubmit={submitLogin}>\n                                <input value={email} onChange={(e) => setEmail(e.target.value)} placeholder=\"Е-mail адреса\" type=\"text\" />\n                                <input value={lozinka} onChange={(e) => namestiLozinka(e.target.value)} placeholder=\"Лозинка\" type=\"password\" />\n                                <button type=\"submit\">Најава</button>\n\n                                <a className=\"pointer hover-text-primary\" onClick={() => { setLoginForm(false); }}>Регистрирај се</a>\n\n                                {\n                                    errors && (\n                                        <div className=\"error-msg\">\n                                            <p>{errors}</p>\n                                        </div>\n                                    )\n                                }\n                            </form>) : (\n                                <form onSubmit={submitRegister}>\n                                    <input value={ime} onChange={(e) => namestiIme(e.target.value)} placeholder=\"Вашето име\" type=\"text\" />\n                                    <input value={prezime} onChange={(e) => namestiPrezime(e.target.value)} placeholder=\"Вашето презиме\" type=\"text\" />\n                                    <input value={telefon} onChange={(e) => namestiTelefon(e.target.value)} placeholder=\"Телефонски број\" type=\"text\" />\n                                    <input value={emailRegister} onChange={(e) => setEmailRegister(e.target.value)} placeholder=\"Е-mail адреса\" type=\"text\" />\n                                    <input value={passwordRegister} onChange={(e) => setPasswordRegister(e.target.value)} placeholder=\"Лозинка\" type=\"password\" />\n                                    <button type=\"submit\">Регистрирај се</button>\n                                    <a className=\"pointer hover-text-primary\" onClick={() => { setLoginForm(true); }}>Најава</a>\n\n                                    {\n                                        errors && (\n                                            <div className=\"error-msg\">\n                                                <p>{errors}</p>\n                                            </div>\n                                        )\n                                    }\n                                </form>\n                            )\n                    }\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <h4 className=\"text-white\">Се зачувува...</h4>\n        )\n    }\n}\n","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/pages/Main.js",["107","108","109","110","111","112","113","114","115","116","117"],"import React, { useContext, useEffect, useState } from 'react'\nimport TopMenu from '../components/TopMenu'\nimport ChatSide from '../components/ChatSide';\nimport ChatRight from '../components/ChatRight';\nimport ChatContext from '../context/chat/chatContext'\nimport AuthContext from '../context/auth/AuthContext'\nimport { zemiSiteGrupi } from '../help/functions'\n\nimport { inicijalizirajSocket, pretplataChat, vleziVoGrupi } from '../help/sockets'\n\nexport default function Main() {\n    const [chats, setChats] = useState([]);\n    const [siteGrupi, namestiSiteGrupi] = useState([]);\n    const {grupi, grupa, vmetniPoraka, zemiGrupi, poraki, zemiPoraki, osveziGrupi} = useContext(ChatContext);\n    const { user, users, citajKorisnici, setChanging } = useContext(AuthContext);\n    \n    useEffect(() => {\n            inicijalizirajSocket();\n            pretplataChat(vmetniPoraka);\n\n            return () => {\n\n            }\n    }, []);\n\n    useEffect(() => {    \n        async function zemiGrupiAsync() {\n            const grupi = await zemiGrupi(user._id);\n        }\n        \n        zemiGrupiAsync();\n        \n    }, []);\n\n    useEffect(() => {\n        console.log('se smena refresh grupi');\n        const zemiGrupiAsync = async() => {\n            await zemiGrupi(user._id);\n        }\n        if (osveziGrupi) {\n        console.log('se smena refresh grupi -true');\n\n            zemiGrupiAsync();\n        }\n    }, [osveziGrupi])\n\n    useEffect(() => {\n        if (grupi && grupi.length != 0) {\n            let grupiTemp = grupi.map((grupa, index) => grupa._id);\n            zemiPoraki(grupiTemp.toString());\n\n            // Najdi gi site users od site grupi\n            let korisniciTemp = [];\n            grupi.forEach(grupa => {\n                grupa.korisnici.forEach(korisnik => {\n                    let duplicate = korisniciTemp.some(korisnicko => korisnicko.trim() == korisnik.trim());\n                    if (!duplicate) {\n                        korisniciTemp.push(korisnik.trim());\n                    }\n                })\n            });\n\n            citajKorisnici(korisniciTemp.toString());\n            namestiSiteGrupi(zemiSiteGrupi(user._id, grupi));\n\n            vleziVoGrupi(grupi, user._id);\n        }\n    }, [grupi]);\n\n\n    return (\n        <div className=\"chat-wrap\">\n            <TopMenu />\n            <div className=\"bottom-main\">\n                <ChatSide grupi={siteGrupi} poraki={poraki} users={users} />\n                <ChatRight />\n            </div>\n        </div>\n    )\n}","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/TopMenu.js",["118","119"],"import React, {useContext, useState} from 'react'\n\nimport Avatar from 'react-avatar'\nimport {MdChat} from 'react-icons/md'\nimport { GrFormDown } from 'react-icons/gr'\nimport AuthContext from '../context/auth/AuthContext'\n\n\nexport default function TopMenu() {\n    const { odlogirajSe, promeniLozinka, setChanging, errors, lozinkaPoraka, user } = useContext(AuthContext);\n    const [settings, setSettings] = useState(false);\n    const [popup, setPopup] = useState(false);\n    const [loadingBtn, setLoadingBtn] = useState(false);\n    const [lozinki, namestiLozinki] = useState({\n        oldPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\"\n    })\n\n    //local funkcii\n    const logout = () => {\n        odlogirajSe();\n    }\n\n    const handleChange = (e) => {\n        console.log(e.target.name);\n        namestiLozinki({\n            ...lozinki,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        setLoadingBtn(true);\n        setChanging(true);\n        var saved = await promeniLozinka(lozinki);\n        setLoadingBtn(false);\n    }\n\n    const { oldPassword, newPassword, confirmPassword } = lozinki;\n    \n    return (\n        <div className=\"top-menu container-small\">\n            <div className=\"top-menu__left\">\n                <div className=\"logo\"> \n                    <MdChat className=\"logo-icon\" />\n                    <h4>D-Chat</h4>\n                </div>\n            </div>\n            <div className=\"top-menu__right\" onClick={() => setSettings(!settings)}>\n                <div className=\"user-settings-toggle\">\n                    <Avatar className=\"avatar\" size=\"30\" name={`${user.ime} ${user.prezime}`} />\n                    <p>{user.ime} {user.prezime}</p>\n                    <GrFormDown size=\"24\" />\n                </div>\n            </div>\n\n            {settings && (\n                <div className=\"options-dropdown\">\n                    <div onClick={() => setPopup(!popup)} className=\"option-choose\">\n                        <p>Промени лозинка</p>\n                    </div>\n                    <div onClick={logout} className=\"option-choose\">\n                        <p>Одјави се</p>\n                    </div>\n                </div>\n            )}\n\n\n            {\n                popup && (\n                    <div className=\"settings fixed d-flex flex-center top-0 left-0 h-100 w-100 bg-dark-light z-9\">\n                        <div className=\"settings-inner d-flex flex-column bg-white box-shadow-light\">\n                            <div className=\"settings-header bb-1px-solid b-lightGrey-lighter d-flex justify-between align-center\">\n                                <h4 className=\"text-uppercase\">Подесувања</h4>\n                                <span onClick={() => setPopup(false)}>&#10005;</span>\n                            </div>\n                            <form noValidate onSubmit={onSubmit} className=\"settings-inner d-flex flex-column px-20px py-20px\">\n                                <div className=\"contact-box d-flex flex-column w-100 b-2px-solid b-lightGrey-lighter py-12px mt-15px\">\n                                    <input className=\"px-5px w-100\" name=\"oldPassword\" onChange={handleChange} value={oldPassword} required type=\"password\" />\n                                    <label htmlFor=\"\">Стара лозинка</label>\n                                </div>\n                                <div className=\"contact-box d-flex flex-column w-100 b-2px-solid b-lightGrey-lighter py-12px mt-15px\">\n                                    <input className=\"px-5px w-100\" name=\"newPassword\" onChange={handleChange} value={newPassword} required type=\"password\" />\n                                    <label htmlFor=\"\">Нова лозинка</label>\n                                </div>\n                                <div className=\"contact-box d-flex flex-column w-100 b-2px-solid b-lightGrey-lighter py-12px mt-15px\">\n                                    <input className=\"px-5px w-100\" name=\"confirmPassword\" onChange={handleChange} value={confirmPassword} required type=\"password\" />\n                                    <label htmlFor=\"\">Потврди лозинка</label>\n                                </div>\n                                <div className=\"submit-btn mt-15px\">\n                                    <button className=\"w-100 bg-primary hover-bg-primary-dark text-uppercase hover-text-dark py-20px text-center text-white\">\n                                        {loadingBtn ? 'Ве молиме почекајте...' : 'Промени лозинка'}\n                                    </button>\n                                </div>\n\n                                <div className=\"error-msg mt-20px\">\n                                    {errors ? errors : ''}\n                                    {lozinkaPoraka != \"\" ? lozinkaPoraka : \"\"}\n                                </div>\n                              \n                            </form>\n\n                        </div>\n                    </div>\n                )\n            }\n        </div>\n    )\n}\n","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/ChatSide.js",["120","121","122","123","124","125","126","127","128","129"],"import React, { useState, useContext, useEffect } from 'react'\nimport Avatar from 'react-avatar'\nimport moment from 'moment'\n\nimport ChatContext from '../context/chat/chatContext'\nimport AuthContext from '../context/auth/AuthContext'\nimport { RiMessage2Line } from 'react-icons/ri'\nimport { zemiSitePoraki, zemiKorisnikPoraka } from '../help/functions'\n\nexport default function ChatSide({ poraki, users }) {\n    //popup za nova grupa\n    const [novaGrupaPopup, namestiNovaGrupaPopup] = useState(false);\n    const [grupaNaslov, namestiGrupaNaslov] = useState('');\n    const [email, namestiEmail] = useState('');\n\n    //context\n    const { user, najdiKorisnikPoMail, novaGrupaMsg, poslednoDodadenMail } = useContext(AuthContext);\n    const { namestiAktivniPoraki, namestiGrupa, grupa, dodajNovaGrupa, grupi } = useContext(ChatContext);\n    const aktivnaGrupa = grupa;\n    const [change, setChange] = useState(false);\n    const [tempKorisnici, namestiTempKorisnici] = useState([]);\n\n    const submitForm = async e => {\n        e.preventDefault();\n\n        najdiKorisnikPoMail(email);\n        setChange(!change);\n    }\n\n    useEffect(() => {\n        if (poslednoDodadenMail) {\n            if (poslednoDodadenMail.email.trim() != \"\") {\n                let posledenMailPostoi = tempKorisnici.some(tempKorisnik => tempKorisnik.email == poslednoDodadenMail.email);\n\n                if (posledenMailPostoi == false) {\n                    let updatedKorisnici = tempKorisnici;\n                    updatedKorisnici.push(poslednoDodadenMail);\n\n                    namestiTempKorisnici(updatedKorisnici);\n                    namestiEmail('');\n                }\n            }\n\n        }\n    }, [poslednoDodadenMail, change]);\n\n    const createGroup = async () => {\n        let tempKorisniciIds = tempKorisnici.map(mail => mail._id);\n\n        if (tempKorisniciIds.includes(user._id) == false) {\n            tempKorisniciIds.push(user._id);\n        }\n        console.log(grupaNaslov);\n        const dodadenaGrupa = await dodajNovaGrupa(tempKorisniciIds.toString(), grupaNaslov);\n\n        console.log(dodadenaGrupa);\n\n        if (dodadenaGrupa) {\n            namestiNovaGrupaPopup(false);\n        }\n    }\n\n    const otstraniOdTemp = async (korisnik) => {\n        let noviKorisnici = tempKorisnici.filter(tempKorisnik => tempKorisnik.email != korisnik.email);\n\n        namestiTempKorisnici(noviKorisnici);\n    }\n\n\n\n    return (\n        <div className=\"messages-list\">\n            <div className=\"messages-list-top container-small\">\n                <p>{grupi.length} пораки</p>\n                <div onClick={() => namestiNovaGrupaPopup(true)} className=\"new-chat\">\n                    <RiMessage2Line size=\"24\" />\n                    <div className=\"plus-icon\"><span>+</span></div>\n                </div>\n            </div>\n\n            {\n                novaGrupaPopup && (\n                    <div className=\"newMessage-popup\">\n                        <div className=\"newMessage-popup__inner\">\n                            <div className=\"header\">\n                                <input value={grupaNaslov} onChange={(e) => namestiGrupaNaslov(e.target.value)} className=\"header-input\" placeholder=\"Име на група\" />\n                                <span onClick={() => namestiNovaGrupaPopup(false)}>&#10005;</span>\n                            </div>\n\n                            <div className=\"content\">\n                                <div className=\"list\">\n                                    {\n                                        tempKorisnici.map(temoKorisnik => (\n                                            <div className=\"item\">\n                                                <p>{temoKorisnik.email}</p>\n                                                <span onClick={() => otstraniOdTemp(temoKorisnik)}>&#10005;</span>\n                                            </div>\n\n                                        ))\n                                    }\n                                </div>\n\n                                <form onSubmit={submitForm} className=\"form\">\n                                    <input value={email} onChange={(e) => namestiEmail(e.target.value)} placeholder=\"E-mail адреса на членот...\" type=\"email\" />\n                                    <button>+</button>\n                                </form>\n\n                                {\n                                    (tempKorisnici && tempKorisnici.length != 0) && (\n                                        <button onClick={createGroup} className=\"createGroup\">Направи група</button>\n                                    )\n                                }\n                                {\n                                    novaGrupaMsg && (\n                                        <div className=\"msg\">\n                                            <p>{novaGrupaMsg}</p>\n                                        </div>\n                                    )\n                                }\n                            </div>\n                        </div>\n                    </div>\n                )\n            }\n\n            <div className=\"chat-list-inner\">\n                {\n                    grupi.map(grupa => {\n                        if (grupa) {\n                            let porakiGrupa = zemiSitePoraki(grupa._id, poraki);\n\n                            console.log(grupa._id);\n                            let porakiGrupaTemp = porakiGrupa;\n\n                            let poslednaPoraka = {\n                                content: \"Нема пораки\",\n                                createdAt: \"\",\n                                updatedAt: \"\",\n                                isprakjac: \"\"\n                            }\n                            if (porakiGrupa.length != 0) poslednaPoraka = porakiGrupa[porakiGrupa.length - 1];\n\n                            //user\n                            let korisnikPoraka = zemiKorisnikPoraka(poslednaPoraka.isprakjac, users);\n\n                            console.log(poslednaPoraka.isprakjac);\n                            console.log(users);\n                            console.log(korisnikPoraka);\n\n\n                            let isprakjacIme = '';\n\n                            if (korisnikPoraka) {\n                                isprakjacIme = korisnikPoraka.ime;\n                            }\n\n                            return (\n                                <div key={grupa._id} onClick={() => { namestiAktivniPoraki(porakiGrupaTemp); namestiGrupa(grupa) }} className={`chat-group container-small ${aktivnaGrupa && aktivnaGrupa._id == grupa._id ? 'active' : ''}`}>\n                                    <div className=\"group-img\">\n                                        <Avatar size={45} className=\"radius-half\" name={grupa.ime} />\n                                    </div>\n                                    <div className=\"group-right\">\n                                        <div className=\"group-right__top\">\n                                            <div className=\"group-name\">\n                                                <p>{grupa.ime}</p>\n                                            </div>\n                                            <div className=\"group-time\">\n                                                <span>{poslednaPoraka.updatedAt ? moment(poslednaPoraka.updatedAt).fromNow() : \"\"}</span>\n                                            </div>\n                                        </div>\n                                        <div className=\"group-right__bottom\">\n                                            <p><b>{isprakjacIme ? `${isprakjacIme}: ` : ''}</b> {poslednaPoraka.sodrzina}</p>\n                                        </div>\n                                    </div>\n                                </div>\n                            )\n\n                        }\n                    })\n                }\n\n            </div>\n        </div>\n    )\n}\n","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/ChatRight.js",["130","131","132","133","134","135","136","137","138","139","140"],"import React, { useState, useEffect, useContext } from 'react'\nimport Avatar from 'react-avatar'\nimport { RiSendPlane2Line } from 'react-icons/ri'\nimport { AiOutlineSave } from 'react-icons/ai'\n\nimport AuthContext from '../context/auth/AuthContext'\nimport ChatContext from '../context/chat/chatContext'\n\nimport Messages from './Messages';\nimport Members from './Members';\n\n//sockets\nimport { ispratiPorakaSocket } from '../help/sockets'\n\n\nexport default function ChatRight() {\n    const [poraka, namestiPoraka] = useState(\"\");\n    const [promenlivo, namestiPromenlivo] = useState(false);\n    const [tab, namestiTab] = useState(1);\n    const [imeGrupa, namestiImeGrupa] = useState('Ime na grupa');\n\n    //context\n    const { zemiPoraki, novaGrupa, aktivniPoraki, poraki, kreirajPoraka, grupa, izmeniGrupa, namestiNovaGrupa } = useContext(ChatContext);\n    const { user } = useContext(AuthContext);\n\n    //useeffects\n    useEffect(() => {\n        if (grupa) {\n            namestiImeGrupa(grupa.ime);\n        }\n    }, [grupa]);\n\n    const promeniImeGrupa = async () => {\n        if (imeGrupa.trim() != \"\") {\n            await izmeniGrupa(grupa._id, imeGrupa);\n\n            namestiPromenlivo(false);\n        }\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        console.log('prakjaj poraka');\n\n        if (poraka.trim() != \"\") {\n            let daliENovaGrupa = false;\n            if (aktivniPoraki.length == 0 || novaGrupa == true) {\n                daliENovaGrupa = true;\n            }\n\n            ispratiPorakaSocket(grupa._id, poraka, user._id, kreirajPoraka, grupa.korisnici, daliENovaGrupa);\n\n            console.log(`Dali e nova grupa: ${daliENovaGrupa}`);\n            namestiNovaGrupa(false);\n            namestiPoraka('');\n        }\n    }\n\n    const namestiPromenlivoGrupa = (vnesenoIme) => {\n        namestiImeGrupa(vnesenoIme);\n\n        if (vnesenoIme.trim() != \"\") {\n            namestiPromenlivo(true);\n        } else {\n            namestiPromenlivo(false);\n        }\n    }\n\n    if (grupa) {\n        return (\n            <div className=\"chat-right\">\n                <div className=\"chat-right__top\">\n                    <div className=\"chat-right__top-left\">\n                        <div className=\"chat-name-icon container-small\">\n                            <div className=\"chat-icon\">\n                                <Avatar name={grupa.ime} className=\"radius-half\" size={50} />\n                            </div>\n                            <div className=\"chat-name\">\n                                <div className=\"chat-name__edit d-flex\">\n                                    <input onChange={(e) => namestiPromenlivoGrupa(e.target.value)} value={imeGrupa} />\n                                    {\n                                        promenlivo && (\n                                            <AiOutlineSave onClick={() => promeniImeGrupa()} size={20} />\n                                        )\n                                    }\n                                </div>\n                                <span>{grupa.korisnici.length} членови</span>\n                            </div>\n                        </div>\n    \n                    </div>\n                    <div className=\"chat-tabs container-small\">\n                        <div onClick={() => namestiTab(1)} className={`chat-tab ${tab == 1 ? 'active' : ''}`}>\n                            <p>Пораки</p>\n                        </div>\n                        <div onClick={() => namestiTab(2)} className={`chat-tab ${tab == 2 ? 'active' : ''}`}>\n                            <p>Членови</p>\n                        </div>\n                    </div>\n                </div>\n    \n                {\n                    tab == 1 ? (\n                        <Messages user={user} />\n                    ) : (\n                        <Members />\n                        )\n                }\n    \n                {\n                    tab == 1 && (\n                        <div className=\"chat-new\">\n                            <form onSubmit={onSubmit} className=\"newMesasge__form\">\n                                <input value={poraka} onChange={(e) => namestiPoraka(e.target.value)} placeholder=\"Напиши порака...\" type=\"text\" />\n                                <button>\n                                    <RiSendPlane2Line size={23} />\n                                </button>\n                            </form>\n                            <form className=\"img-pick\" action=\"\">\n                                <input type=\"file\" name=\"\" id=\"\" />\n                            </form>\n                        </div>\n    \n                    )\n                }\n            </div>\n        )\n    } else {\n        return <div>\n            <p></p>\n        </div>\n    }\n}\n","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Messages.js",["141","142","143","144","145","146","147"],"import React, {useState, useContext, useRef, useEffect} from 'react'\nimport Avatar from 'react-avatar'\nimport moment from 'moment'\n\nimport AuthContext from '../context/auth/AuthContext' \nimport ChatContext from '../context/chat/chatContext' \n\n\nexport default function Messages({user}) {\n    const messagesEndRef = React.useRef(null);\n    const { aktivniPoraki, grupa } = useContext(ChatContext);\n    const { users } = useContext(AuthContext);\n\n    const SkrolajNajdolu = () => {\n        const elementRef = useRef();\n        useEffect(() => elementRef.current.scrollIntoView());\n        return <div ref={elementRef} />;\n    };\n\n\n    return (\n        <div className=\"chat-messages-wrap container-small\">\n            {\n                 aktivniPoraki.map(poraka => {\n                    let classMessage = \"\";\n\n                    let userInfo = users.filter(userTemp => userTemp._id == poraka.isprakjac);\n\n                    userInfo = userInfo[0];\n\n                    if (poraka.isprakjac == user._id) classMessage = 'me';\n                    if (poraka.grupa == grupa._id) {\n                        return (\n                            <div key={poraka._id} className={`chat-one ${classMessage}`}>\n                                <div className=\"chat-avatar\">\n                                    <Avatar size=\"22\" name={`${userInfo.ime} ${userInfo.prezime}`} className=\"radius-half\" size={32} />\n                                </div>\n                                <div className=\"chat-messages\">\n                                    <div className=\"chat-message\">\n                                        <p>{poraka.sodrzina}</p>\n                                    </div>\n                                    <div className=\"chat-time\">\n                                        <p>{moment(poraka.createdAt).format(\"HH:mm, DD/MM/YYYY\")}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                    }\n                })\n            }\n\n            <SkrolajNajdolu />\n        </div>\n    )\n}\n","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Members.js",["148","149","150","151","152","153","154","155","156"],"import React, { useState, useEffect, useContext } from 'react'\nimport Avatar from 'react-avatar'\nimport { AiFillSetting } from 'react-icons/ai'\n\nimport ChatContext from '../context/chat/chatContext'\nimport AuthContext from '../context/auth/AuthContext'\nimport { zemiKorisnik } from '../help/functions';\n\nexport default function Members() {\n    const { grupa, izmeniGrupa, namestiNovaGrupa } = useContext(ChatContext);\n    const { users, najdiKorisnikPoMail, novaGrupaMsg, poslednoDodadenMail } = useContext(AuthContext);\n    const [tempKorisnici, namestiTempKorisnici] = useState([]);\n    const [semenuva, namestiSemenuva] = useState(false);\n    const [grupaNaslov, namestiGrupaNaslov] = useState('');\n    const [change, setChange] = useState(false);\n    const [email, setEmail] = useState(\"\");\n\n    const submitForm = async e => {\n        e.preventDefault();\n\n        await najdiKorisnikPoMail(email);\n        setChange(!change);\n    }\n\n    useEffect(() => {\n        if (poslednoDodadenMail) {\n            if (poslednoDodadenMail.email.trim() != \"\") {\n                let posledenEmailPostoi = tempKorisnici.some(tempkorisnik => tempkorisnik.email == poslednoDodadenMail.email);\n    \n                if (posledenEmailPostoi == false) {\n                    let noviKorisnici = tempKorisnici;\n                    noviKorisnici.push(poslednoDodadenMail);\n    \n                    namestiTempKorisnici(noviKorisnici);\n                    setEmail('');\n                }\n            }\n\n        }\n    }, [poslednoDodadenMail, change]);\n\n    useEffect(() => {\n        if (grupa) {\n            let tmails = [];\n\n            for (let i = 0; i < grupa.korisnici.length; i++) {\n                for (let j = 0; j < users.length; j++) {\n                    console.log(users[j]._id);\n                    console.log(grupa.korisnici[i]);\n                    if (grupa.korisnici[i] == users[j]._id) {\n                        console.log('isto e');\n                        tmails.push({\n                            id: users[j]._id,\n                            email: users[j].email\n                        });\n                    }\n                }\n            }\n\n            namestiTempKorisnici(tmails);\n            namestiGrupaNaslov(grupa.ime);\n        }\n        \n    }, [grupa]);\n\n    const otstraniOdTemp = async (korisnikZaB) => {\n        let noviKorisnici = tempKorisnici.filter(korisnik => korisnik.email != korisnikZaB.email);\n\n        namestiTempKorisnici(noviKorisnici);\n    }\n\n    const izmeniGrupaAsync = async () => {\n        let korisnici = tempKorisnici.map(tk => {\n            let rmId = tk.id;\n\n            if (!!tk._id) rmId = tk._id;\n\n            return rmId;\n        });\n\n        await izmeniGrupa(grupa._id, grupaNaslov, korisnici);\n\n        namestiSemenuva(false);\n        namestiNovaGrupa(true);\n    }\n\n\n    return (\n        <div className=\"members\">\n           {\n                grupa.korisnici.map(userId => {\n                    let user = zemiKorisnik(userId, users);\n\n                    return (\n                        <div key={user._id} className=\"member\">\n                            <div className=\"member-left\">\n                                <Avatar className=\"avatar\" size=\"30\" name={`${user.ime}`} />\n                                <span className=\"member-name\">{user.ime} {user.prezime}</span>\n                            </div>\n                            <div onClick={() => namestiSemenuva(true)} className=\"member-right\">\n                                <AiFillSetting color=\"#444\" size=\"20\" />\n                            </div>\n                        </div>\n                    )\n                })\n            }\n\n\n{\n                semenuva && (\n                    <div className=\"newMessage-popup\">\n                        <div className=\"newMessage-popup__inner\">\n                            <div className=\"header\">\n                                <input value={grupaNaslov} onChange={(e) => namestiGrupaNaslov(e.target.value)} className=\"header-input\" placeholder=\"Име на група\" />\n                                <span onClick={() => namestiSemenuva(false)}>&#10005;</span>\n                            </div>\n\n                            <div className=\"content\">\n                                {\n                                     (tempKorisnici && tempKorisnici.length != 0) ? (\n                                <div className=\"list\">\n                                    {\n                                        tempKorisnici.map(tempkorisnik => (\n                                        <div className=\"item\">\n                                            <p>{tempkorisnik.email}</p>\n                                            <span onClick={() => otstraniOdTemp(tempkorisnik)}>&#10005;</span>\n                                        </div>\n\n                                        ))\n                                    }\n                                </div>\n\n                                     ) : (\n                                         <p className=\"noUsers\">Нема корисници</p>\n                                     )\n                                }\n\n                                <form onSubmit={submitForm} className=\"form\">\n                                    <input value={email} onChange={(e) => setEmail(e.target.value)} placeholder=\"Еmail адреса на членот...\" type=\"email\"/>\n                                    <button>+</button>\n                                </form>\n\n                                {\n                                    (tempKorisnici && tempKorisnici.length != 0) && (\n                                        <button onClick={izmeniGrupaAsync} className=\"createGroup\">Зачувај промени</button>\n                                    )\n                                }\n                                {\n                                    novaGrupaMsg && (\n                                         <div className=\"msg\">\n                                            <p>{novaGrupaMsg}</p>\n                                        </div>\n                                    )\n                                }\n                            </div>\n                        </div>\n                    </div>\n                )\n            }\n        </div>\n    )\n}\n","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/pages/PrivateRoute.js",["157","158","159"],"import React, { useContext, useEffect, useState } from 'react'\nimport Account from '../components/Account'\nimport AuthContext from '../context/auth/AuthContext'\nimport Main from './Main'\nimport Loading from '../components/Loading'\n\nexport default function PrivateRoute() {\n    const { user, namestiNajavenKorisnik } = useContext(AuthContext);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        async function namestiKorisnik(token) {\n            const loggedIn = await namestiNajavenKorisnik(token);\n            setLoading(false);\n        }\n\n        let token = \"\";\n        if (typeof localStorage.token != \"undefined\") {\n            token = localStorage.token;\n        }\n\n        if (user) {\n            //vekje logiran\n        } else {\n            if (token.trim() != \"\") {\n                namestiKorisnik(token);\n            } else {\n                setLoading(false);\n            }\n        }\n    }, []);\n\n    return (\n        <div>\n        {\n            loading ? <Loading /> : user ? (\n                    <Main />\n                ) : (\n                <div className=\"account bg-primary\">\n                    <Account />\n                </div>\n                )\n            }\n        </div>\n    )\n}","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/auth/AuthState.js",["160","161","162"],"import React, { useReducer } from 'react'\nimport axios from '../../axios'\n\nimport AuthContext from './AuthContext'\nimport authReducer from './AuthReducer'\nimport { SET_USER, SET_USERS, LOGOUT_USER, AUTH_ERROR, SUCCESS_REGISTER, FAIL_REGISTER, SUCCESS_LOGIN, FAIL_LOGIN, SET_ERROR, CLEAR_ERROR, CHANGE_PASSWORD_SUCCESS, CHANGE_PASSWORD_ERROR, SET_CHANGING, SET_NEWCHAT_MSG } from '../types'\nimport { setToken } from '../../help/functions'\n\nconst AuthState = props => {\n    const initState = {\n        user: null,\n        userAuth: null,\n        errors: null,\n        users: [],\n        sepromenuvaLozinka: false,\n        lozinkaPoraka: \"\",\n        novaGrupaMsg: \"\",\n        poslednoDodadenMail: \"\"\n    }\n\n    const [state, dispatch] = useReducer(authReducer, initState);\n\n    const citajKorisnici = async (users) => {\n        try {\n            const res = await axios.get('/register/users', {\n                params: {\n                    users\n                }\n            });\n\n            dispatch({\n                type: SET_USERS,\n                payload: res.data.users\n            })\n        } catch (err) {\n        }\n    }\n\n    const setError = err => {\n        dispatch({\n            type: SET_ERROR,\n            payload: err\n        })\n    }\n\n    const namestiNajavenKorisnik = async token => {\n        try {\n            setToken(token);\n            const res = await axios.get(`/auth`);\n            // ako postoi token vo localStorage, no e istecen -> izbrisi i reload.\n            if (!res.data) {\n                delete localStorage.token;\n                window.location.reload();\n            }\n\n            dispatch({\n                type: SET_USER,\n                payload: res.data\n            })\n        } catch (err) {\n            if (err.response && err.response.status == 401) {\n                // nenajaven\n                delete localStorage.token;\n            }\n\n            dispatch({\n                type: AUTH_ERROR,\n                payload: err.response ? err.response.data : ''\n            })\n        }\n    }\n\n\n    //najava - registracija\n\n    const registrirajSe = async user => {\n\n        const config = {\n            header: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        try {\n            const res = await axios.post(`/register`, user, config);\n\n            dispatch({\n                type: SUCCESS_REGISTER,\n                payload: res.data\n            })\n\n            namestiNajavenKorisnik(res.data.token);\n        } catch (err) {\n            let errorMsg = '';\n            if (err.response.data.errors.constructor === Array) {\n                errorMsg = err.response.data.errors[0].msg;\n            } else {\n                errorMsg = err.response.data.errors.msg;\n            }\n            if (err.response) {\n                dispatch({\n                    type: FAIL_REGISTER,\n                    payload: errorMsg\n                })\n            }\n        }\n    }\n\n    const odlogirajSe = () => {\n        localStorage.removeItem(\"token\");\n\n        dispatch({\n            type: LOGOUT_USER,\n            payload: localStorage.token\n        })\n    }\n\n    const logirajSe = async user => {\n        const config = {\n            header: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        try {\n            const res = await axios.post(`/auth`, user, config);\n            dispatch({\n                type: SUCCESS_LOGIN,\n                payload: res.data\n            })\n\n            namestiNajavenKorisnik(res.data.token);\n        } catch (err) {\n            if (err) {\n                console.log(err.response);\n                let errorMsg = '';\n        \n                if (err.response.data.errors.constructor === Array) {\n                    errorMsg = err.response.data.errors[0].msg;\n                } else {\n                    errorMsg = err.response.data.errors.msg;\n                }\n                if (err.response) {\n                    dispatch({\n                        type: FAIL_LOGIN,\n                        payload: errorMsg\n                    })\n                }\n            }\n        }\n    }\n\n    const promeniLozinka = async lozinki => {\n        try {\n            const res = await axios.post(`/auth/${state.user._id}`, lozinki);\n\n            dispatch({\n                type: CHANGE_PASSWORD_SUCCESS\n            })\n\n            window.location.reload(false);\n\n        } catch (err) {\n            dispatch({\n                type: CHANGE_PASSWORD_ERROR,\n                payload: err.response.data.err || err.response.data.msg\n            })\n        }\n    }\n\n    const setChanging = (temp) => {\n        dispatch({\n            type: SET_CHANGING,\n            payload: temp\n        })\n    }\n    const najdiKorisnikPoMail = async email => {\n        try {\n            const res = await axios.get(`/auth/${email}`);\n\n            dispatch({\n                type: SET_NEWCHAT_MSG,\n                payload: {\n                    msg: res.data.msg,\n                    email: res.data.user\n                }\n            })\n        } catch (err) {\n            console.log(err);\n            console.log(err.response);\n            dispatch({\n                type: SET_NEWCHAT_MSG,\n                payload: {\n                    msg: err.response.data.msg,\n                    email: \"\"\n                }\n            })\n        }\n    }\n\n\n    return (\n        <AuthContext.Provider value={{\n            user: state.user,\n            userAuth: state.userAuth,\n            errors: state.errors,\n            users: state.users,\n            lozinkaPoraka: state.lozinkaPoraka,\n            sepromenuvaLozinka: state.sepromenuvaLozinka,\n            novaGrupaMsg: state.novaGrupaMsg,\n            poslednoDodadenMail: state.poslednoDodadenMail,\n            namestiNajavenKorisnik,\n            citajKorisnici,\n            logirajSe,\n            registrirajSe,\n            odlogirajSe,\n            setError,\n            promeniLozinka,\n            setChanging,\n            najdiKorisnikPoMail\n        }}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthState;","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/auth/AuthContext.js",[],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/types.js",[],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/auth/AuthReducer.js",["163"],"import { SET_USER, SET_USERS, SET_NEWCHAT_MSG, LOGOUT_USER, AUTH_ERROR, SUCCESS_REGISTER, FAIL_REGISTER, SUCCESS_LOGIN, FAIL_LOGIN, SET_ERROR, CLEAR_ERROR, SET_CHANGING,  CHANGE_PASSWORD_ERROR, CHANGE_PASSWORD_SUCCESS } from '../types'\n\nexport default (state, action) => {\n    switch (action.type) {\n        case SUCCESS_REGISTER:\n        case SUCCESS_LOGIN:\n            localStorage.setItem('token', action.payload.token);\n            return {\n                ...state,\n                userAuth: true,\n                errors: null\n            }\n        case LOGOUT_USER:\n            return {\n                userAuth: null,\n                user: null,\n                sepromenuvaLozinka: false,\n                errors: null,\n            }\n        case FAIL_REGISTER:\n        case FAIL_LOGIN:\n        case AUTH_ERROR:\n            if (action.payload) {\n                // localStorage.removeItem(\"token\");\n                return {\n                    ...state,\n                    userAuth: null,\n                    errors: action.payload,\n                    user: null,\n                    lozinkaPoraka: \"\"\n                }\n            }\n            break;\n        case CHANGE_PASSWORD_ERROR:\n            return {\n                ...state,\n                errors: action.payload,\n                lozinkaPoraka: \"\"\n            }\n        case CHANGE_PASSWORD_SUCCESS:\n            return {\n                ...state,\n                errors: null,\n                user: action.payload,\n                userAuth: true,\n                lozinkaPoraka: \"Лозинката е успешно променета\"\n            }\n        case SET_ERROR:\n            return {\n                ...state,\n                errors: action.payload\n            }\n        case CLEAR_ERROR:\n            return {\n                ...state,\n                errors: null\n            }\n        case SET_USER:\n            return {\n                ...state,\n                userAuth: true,\n                user: action.payload,\n                errors: null,\n                sepromenuvaLozinka: false\n            }\n        case SET_USERS:\n            return {\n                ...state,\n                errors: null,\n                users: action.payload\n            }\n        case SET_CHANGING: {\n            return {\n                ...state,\n                sepromenuvaLozinka: action.payload\n            }\n        }\n\n        case SET_NEWCHAT_MSG: \n        return {\n            ...state,\n            users: [...state.users, action.payload.email],\n            novaGrupaMsg: action.payload.msg,\n            poslednoDodadenMail: action.payload.email\n        }\n\n        default:\n            return state;\n    }\n}","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/help/functions.js",["164","165","166"],"import axios from '../axios'\n\nexport const setToken = token => {\n    if (token) {\n        axios.defaults.headers.common['auth-token'] = token;\n\n    } else {\n        delete axios.defaults.headers.common[\"auth-token\"];\n    }\n}\n\n\nexport const zemiKorisnik = (userId, korisnici) => {\n    if (userId) {\n        return korisnici.filter(user => user._id == userId)[0];\n\n    } else {\n        return [];\n    }\n} \n\nexport const zemiSiteGrupi = (userId, grupi) => {\n    let tempGrupi = grupi.map(grupa => {\n        if (grupa.korisnici.includes(userId)) return grupa;\n    });\n\n    var sortiraniGrupi = tempGrupi.sort((a,b) => (a.poslednaPoraka < b.poslednaPoraka) ? 1 : ((b.poslednaPoraka < a.poslednaPoraka) ? -1 : 0));\n    \n    return sortiraniGrupi;\n}\n\nexport const zemiSitePoraki = (grupa, poraki) => {\n    if (poraki) {\n        return poraki.filter(poraka => poraka.grupa === grupa);\n    } else {\n        return [];\n    }\n}\n\nexport const zemiKorisnikPoraka = (isprakjac, korisnici) => {\n    if (isprakjac && korisnici) {\n        return korisnici.filter(korisnik => korisnik._id == isprakjac)[0];\n    } else {\n        return [];\n    }\n} ","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/axios.js",[],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/components/Loading.js",[],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/chat/chatState.js",["167","168","169","170","171","172"],"import React, { useReducer } from 'react'\nimport axios from '../../axios'\nimport ChatContext from './chatContext'\nimport chatReducer from './chatReducer'\nimport {\n    SET_ERROR,\n    CLEAR_ERROR,\n    SUCCESS_ADD_MESSAGE,\n    SET_MESSAGES,\n    SET_GROUP,\n    SET_GROUPS,\n    SET_ACTIVE_MESSAGES,\n    ADD_NEW_GROUP,\n    UPDATE_GROUP,\n    SUCCESS_CHANGE_GROUP,\n    SET_NEW_GROUP\n} from '../types'\nimport {setToken} from '../../help/functions'\n\nconst ChatState = props => {\n    const initState = {\n        error: null,\n        poraki: [],\n        grupa: null,\n        grupi: [],\n        aktivniPoraki: [],\n        osveziGrupi: false,\n        novaGrupa: false\n    }\n    const [state, dispatch] = useReducer(chatReducer, initState);\n\n    const namestiGrupa = (grupaId) => {\n        dispatch({\n            type: SET_GROUP,\n            payload: grupaId\n        })\n    }\n\n    const namestiNovaGrupa = (novaGrupa) => {\n        dispatch({\n            type: SET_NEW_GROUP,\n            payload: novaGrupa\n        })\n    }\n\n    const zemiPoraki = async (grupi) => {\n        try {\n            const res = await axios.get('/messages', {\n                params: {\n                    grupi\n                }\n            });\n\n            dispatch({\n                type: SET_MESSAGES,\n                payload: res.data.messages\n            })\n        } catch (err) {\n            dispatch({\n                type: SET_ERROR,\n                payload: err\n            })\n        }\n    }\n\n    const kreirajPoraka = async (poraka) => {\n        var { grupa, sodrzina, isprakjac } = poraka;\n\n        try {\n            const res = await axios.post('/messages', {\n                grupa, sodrzina, isprakjac\n            });\n            console.log('update grupa: ', grupa);\n            dispatch({\n                type: UPDATE_GROUP,\n                payload: grupa\n            });\n        } catch (err) {\n        }\n    }\n\n    const vmetniPoraka = async (poraka) => {\n        var { grupa, sodrzina, isprakjac } = poraka;\n        dispatch({\n            type: SUCCESS_ADD_MESSAGE,\n            payload: poraka\n        })\n    }\n\n    const zemiGrupi = async (korisnici) => {\n        try {\n            const res = await axios.get('/groups', {\n                params: {\n                    korisnici\n                }\n            });\n\n            dispatch({\n                type: SET_GROUPS,\n                payload: res.data.grupi\n            })\n        } catch (err) {\n            dispatch({\n                type: SET_ERROR,\n                payload: err\n            })\n        }\n    }\n\n    const namestiAktivniPoraki = poraki => {\n        dispatch({\n            type: SET_ACTIVE_MESSAGES,\n            payload: poraki\n        })\n    }\n\n\n    const izmeniGrupa = async (grupaId, ime = null, korisnici = null) => {\n        console.log(korisnici);\n        try {\n            const res = await axios.post(`/groups/${grupaId}`, {\n                korisnici,\n                ime\n            })\n\n            dispatch({\n                type: SUCCESS_CHANGE_GROUP,\n                payload: res.data\n            })\n        } catch (err) {\n            console.log(err);\n            // dispatch({\n            //     type: SET_ERROR,\n\n            // })\n        }\n    }\n\n    const dodajNovaGrupa = async (korisnici, ime) => {\n        try {\n            const res = await axios.post('/groups', {\n                korisnici,\n                ime\n            });\n\n            console.log(res.data);\n\n            dispatch({\n                type: ADD_NEW_GROUP,\n                payload: res.data.grupa\n            })\n\n            return true;\n        } catch (err) {\n            console.log(err);\n            console.log(err.response);\n            let errorMsg = err.response.data.errors[0].msg;\n            alert(errorMsg);\n\n            return false;\n        }\n    }\n\n\n    return (\n        <ChatContext.Provider value={{\n            zemiPoraki,\n            namestiGrupa,\n            kreirajPoraka,\n            zemiGrupi,\n            namestiAktivniPoraki,\n            vmetniPoraka,\n            dodajNovaGrupa,\n            izmeniGrupa,\n            namestiNovaGrupa,\n            error: state.error,\n            poraki: state.poraki,\n            grupa: state.grupa,\n            grupi: state.grupi,\n            osveziGrupi: state.osveziGrupi,\n            aktivniPoraki: state.aktivniPoraki,\n            novaGrupa: state.novaGrupa\n        }}>\n            {props.children}\n        </ChatContext.Provider>\n    )\n}\n\nexport default ChatState","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/chat/chatContext.js",[],"/home/dimitar/Documents/code-learn/dchat/dchat-client/src/context/chat/chatReducer.js",["173","174","175","176","177","178","179","180"],"import {\n    SET_ERROR,\n    CLEAR_ERROR,\n    SUCCESS_ADD_MESSAGE,\n    SET_MESSAGES,\n    SET_GROUP,\n    SET_GROUPS,\n    SET_ACTIVE_MESSAGES,\n    ADD_NEW_GROUP,\n    UPDATE_GROUP,\n    SUCCESS_CHANGE_GROUP,\n    SET_NEW_GROUP,\n    SUCCESS_DELETE_MESSAGE\n} from '../types'\n\nexport default (state, action) => {\n    switch (action.type) {\n        case SET_GROUP:\n            return {\n                ...state,\n                grupa: action.payload\n            }\n        case SET_GROUPS:\n            const sortiraniGrupi = action.payload.sort((a,b) => (a.poslednaPoraka < b.poslednaPoraka) ? 1 : ((b.poslednaPoraka < a.poslednaPoraka) ? -1 : 0));\n            return {\n                ...state,\n                grupi: sortiraniGrupi,\n                osveziGrupi: false\n            }\n        case UPDATE_GROUP:\n            var grupiPredUpdate = state.grupi;\n\n            for (let i = 0; i < grupiPredUpdate.length; i++) {\n                if (grupiPredUpdate[i]._id == action.payload) {\n                    grupiPredUpdate[i].poslednaPoraka = new Date().getTime();\n                }\n            }\n\n            const sortiraniGrupiUpdate = grupiPredUpdate.sort((a,b) => (a.poslednaPoraka < b.poslednaPoraka) ? 1 : ((b.poslednaPoraka < a.poslednaPoraka) ? -1 : 0));\n\n            return {\n                ...state,\n                grupi: sortiraniGrupiUpdate\n            }\n        case SUCCESS_CHANGE_GROUP:\n            console.log(action.payload);\n            let promenetiGrupi = state.grupi.map(grupa => {\n                if (grupa._id == action.payload._id) {\n                    grupa = action.payload;\n                }\n\n                return grupa;\n            })\n\n            console.log(promenetiGrupi);\n            return {\n                ...state,\n                grupi: promenetiGrupi,\n                grupa: action.payload\n            }\n        case ADD_NEW_GROUP:\n            return {\n                ...state,\n                grupi: [...state.grupi, action.payload],\n                grupa: action.payload\n            }\n        case SUCCESS_ADD_MESSAGE: \n        var grupiPredUpdate1 = state.grupi;\n\n        var grupaInfo = grupiPredUpdate1.filter(r => r._id == action.payload.grupa);\n\n        var osveziGrupi = false;\n        if (grupaInfo.length == 0) {\n            osveziGrupi=true;\n        }\n\n            for (let i = 0; i < grupiPredUpdate1.length; i++) {\n                if (grupiPredUpdate1[i]._id == action.payload.grupa) {\n                    grupiPredUpdate1[i].poslednaPoraka = new Date().getTime();\n                }\n            }\n\n            const sortiraniGrupiPredUpdate = grupiPredUpdate1.sort((a,b) => (a.poslednaPoraka < b.poslednaPoraka) ? 1 : ((b.poslednaPoraka < a.poslednaPoraka) ? -1 : 0));\n\n        return {\n            ...state,\n            poraki: [...state.poraki, action.payload],\n            aktivniPoraki: [...state.aktivniPoraki, action.payload],\n            error: null,\n            grupi: sortiraniGrupiPredUpdate,\n            osveziGrupi\n        }\n     \n        case SET_NEW_GROUP:\n            return {\n                ...state,\n                novaGrupa: action.payload\n            }\n        break;\n        case SET_MESSAGES:\n           \n            return {\n                ...state,\n                poraki: action.payload,\n                error: null\n            }\n        case SET_ERROR:\n            return {\n                ...state,\n                error: action.payload\n            }\n        case CLEAR_ERROR:\n            return {\n                ...state,\n                error: null\n            }\n        case SET_ACTIVE_MESSAGES:\n            return {\n                ...state,\n                aktivniPoraki: action.payload\n            }\n        default:\n            return state;\n    }\n}","/home/dimitar/Documents/code-learn/dchat/dchat-client/src/help/sockets.js",[],{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":6,"column":47,"nodeType":"187","messageId":"188","endLine":6,"endColumn":55},{"ruleId":"185","severity":1,"message":"189","line":30,"column":15,"nodeType":"187","messageId":"188","endLine":30,"endColumn":22},{"ruleId":"185","severity":1,"message":"190","line":45,"column":15,"nodeType":"187","messageId":"188","endLine":45,"endColumn":26},{"ruleId":"191","severity":1,"message":"192","line":63,"column":33,"nodeType":"193","endLine":63,"endColumn":116},{"ruleId":"191","severity":1,"message":"192","line":80,"column":37,"nodeType":"193","endLine":80,"endColumn":119},{"ruleId":"185","severity":1,"message":"194","line":12,"column":12,"nodeType":"187","messageId":"188","endLine":12,"endColumn":17},{"ruleId":"185","severity":1,"message":"195","line":12,"column":19,"nodeType":"187","messageId":"188","endLine":12,"endColumn":27},{"ruleId":"185","severity":1,"message":"196","line":14,"column":19,"nodeType":"187","messageId":"188","endLine":14,"endColumn":24},{"ruleId":"185","severity":1,"message":"197","line":15,"column":42,"nodeType":"187","messageId":"188","endLine":15,"endColumn":53},{"ruleId":"198","severity":1,"message":"199","line":24,"column":8,"nodeType":"200","endLine":24,"endColumn":10,"suggestions":"201"},{"ruleId":"185","severity":1,"message":"202","line":28,"column":19,"nodeType":"187","messageId":"188","endLine":28,"endColumn":24},{"ruleId":"198","severity":1,"message":"203","line":33,"column":8,"nodeType":"200","endLine":33,"endColumn":10,"suggestions":"204"},{"ruleId":"198","severity":1,"message":"203","line":45,"column":8,"nodeType":"200","endLine":45,"endColumn":21,"suggestions":"205"},{"ruleId":"206","severity":1,"message":"207","line":48,"column":35,"nodeType":"208","messageId":"209","endLine":48,"endColumn":37},{"ruleId":"206","severity":1,"message":"210","line":56,"column":88,"nodeType":"208","messageId":"209","endLine":56,"endColumn":90},{"ruleId":"198","severity":1,"message":"211","line":68,"column":8,"nodeType":"200","endLine":68,"endColumn":15,"suggestions":"212"},{"ruleId":"185","severity":1,"message":"213","line":37,"column":13,"nodeType":"187","messageId":"188","endLine":37,"endColumn":18},{"ruleId":"206","severity":1,"message":"207","line":100,"column":52,"nodeType":"208","messageId":"209","endLine":100,"endColumn":54},{"ruleId":"206","severity":1,"message":"207","line":32,"column":50,"nodeType":"208","messageId":"209","endLine":32,"endColumn":52},{"ruleId":"206","severity":1,"message":"210","line":33,"column":96,"nodeType":"208","messageId":"209","endLine":33,"endColumn":98},{"ruleId":"206","severity":1,"message":"210","line":35,"column":40,"nodeType":"208","messageId":"209","endLine":35,"endColumn":42},{"ruleId":"198","severity":1,"message":"214","line":45,"column":8,"nodeType":"200","endLine":45,"endColumn":37,"suggestions":"215"},{"ruleId":"206","severity":1,"message":"210","line":50,"column":49,"nodeType":"208","messageId":"209","endLine":50,"endColumn":51},{"ruleId":"206","severity":1,"message":"207","line":64,"column":85,"nodeType":"208","messageId":"209","endLine":64,"endColumn":87},{"ruleId":"206","severity":1,"message":"207","line":109,"column":76,"nodeType":"208","messageId":"209","endLine":109,"endColumn":78},{"ruleId":"216","severity":1,"message":"217","line":128,"column":37,"nodeType":"218","messageId":"219","endLine":128,"endColumn":39},{"ruleId":"206","severity":1,"message":"207","line":141,"column":52,"nodeType":"208","messageId":"209","endLine":141,"endColumn":54},{"ruleId":"206","severity":1,"message":"210","line":158,"column":207,"nodeType":"208","messageId":"209","endLine":158,"endColumn":209},{"ruleId":"185","severity":1,"message":"220","line":23,"column":13,"nodeType":"187","messageId":"188","endLine":23,"endColumn":23},{"ruleId":"185","severity":1,"message":"221","line":23,"column":51,"nodeType":"187","messageId":"188","endLine":23,"endColumn":57},{"ruleId":"206","severity":1,"message":"207","line":34,"column":29,"nodeType":"208","messageId":"209","endLine":34,"endColumn":31},{"ruleId":"206","severity":1,"message":"207","line":45,"column":27,"nodeType":"208","messageId":"209","endLine":45,"endColumn":29},{"ruleId":"206","severity":1,"message":"210","line":47,"column":38,"nodeType":"208","messageId":"209","endLine":47,"endColumn":40},{"ruleId":"206","severity":1,"message":"210","line":47,"column":56,"nodeType":"208","messageId":"209","endLine":47,"endColumn":58},{"ruleId":"206","severity":1,"message":"207","line":62,"column":31,"nodeType":"208","messageId":"209","endLine":62,"endColumn":33},{"ruleId":"206","severity":1,"message":"210","line":93,"column":87,"nodeType":"208","messageId":"209","endLine":93,"endColumn":89},{"ruleId":"206","severity":1,"message":"210","line":96,"column":87,"nodeType":"208","messageId":"209","endLine":96,"endColumn":89},{"ruleId":"206","severity":1,"message":"210","line":103,"column":25,"nodeType":"208","messageId":"209","endLine":103,"endColumn":27},{"ruleId":"206","severity":1,"message":"210","line":111,"column":25,"nodeType":"208","messageId":"209","endLine":111,"endColumn":27},{"ruleId":"185","severity":1,"message":"222","line":1,"column":16,"nodeType":"187","messageId":"188","endLine":1,"endColumn":24},{"ruleId":"185","severity":1,"message":"223","line":10,"column":11,"nodeType":"187","messageId":"188","endLine":10,"endColumn":25},{"ruleId":"216","severity":1,"message":"217","line":24,"column":43,"nodeType":"218","messageId":"219","endLine":24,"endColumn":45},{"ruleId":"206","severity":1,"message":"210","line":27,"column":74,"nodeType":"208","messageId":"209","endLine":27,"endColumn":76},{"ruleId":"206","severity":1,"message":"210","line":31,"column":42,"nodeType":"208","messageId":"209","endLine":31,"endColumn":44},{"ruleId":"206","severity":1,"message":"210","line":32,"column":38,"nodeType":"208","messageId":"209","endLine":32,"endColumn":40},{"ruleId":"224","severity":1,"message":"225","line":36,"column":124,"nodeType":"226","endLine":36,"endColumn":133},{"ruleId":"206","severity":1,"message":"207","line":27,"column":50,"nodeType":"208","messageId":"209","endLine":27,"endColumn":52},{"ruleId":"206","severity":1,"message":"210","line":28,"column":97,"nodeType":"208","messageId":"209","endLine":28,"endColumn":99},{"ruleId":"206","severity":1,"message":"210","line":30,"column":41,"nodeType":"208","messageId":"209","endLine":30,"endColumn":43},{"ruleId":"198","severity":1,"message":"214","line":40,"column":8,"nodeType":"200","endLine":40,"endColumn":37,"suggestions":"227"},{"ruleId":"206","severity":1,"message":"210","line":50,"column":44,"nodeType":"208","messageId":"209","endLine":50,"endColumn":46},{"ruleId":"198","severity":1,"message":"228","line":64,"column":8,"nodeType":"200","endLine":64,"endColumn":15,"suggestions":"229"},{"ruleId":"206","severity":1,"message":"207","line":67,"column":77,"nodeType":"208","messageId":"209","endLine":67,"endColumn":79},{"ruleId":"206","severity":1,"message":"207","line":120,"column":77,"nodeType":"208","messageId":"209","endLine":120,"endColumn":79},{"ruleId":"206","severity":1,"message":"207","line":144,"column":76,"nodeType":"208","messageId":"209","endLine":144,"endColumn":78},{"ruleId":"185","severity":1,"message":"230","line":13,"column":19,"nodeType":"187","messageId":"188","endLine":13,"endColumn":27},{"ruleId":"206","severity":1,"message":"207","line":25,"column":30,"nodeType":"208","messageId":"209","endLine":25,"endColumn":32},{"ruleId":"198","severity":1,"message":"231","line":31,"column":8,"nodeType":"200","endLine":31,"endColumn":10,"suggestions":"232"},{"ruleId":"185","severity":1,"message":"233","line":6,"column":127,"nodeType":"187","messageId":"188","endLine":6,"endColumn":138},{"ruleId":"206","severity":1,"message":"210","line":61,"column":53,"nodeType":"208","messageId":"209","endLine":61,"endColumn":55},{"ruleId":"185","severity":1,"message":"234","line":155,"column":19,"nodeType":"187","messageId":"188","endLine":155,"endColumn":22},{"ruleId":"235","severity":1,"message":"236","line":3,"column":1,"nodeType":"237","endLine":90,"endColumn":2},{"ruleId":"206","severity":1,"message":"210","line":15,"column":50,"nodeType":"208","messageId":"209","endLine":15,"endColumn":52},{"ruleId":"216","severity":1,"message":"217","line":23,"column":37,"nodeType":"218","messageId":"219","endLine":23,"endColumn":39},{"ruleId":"206","severity":1,"message":"210","line":42,"column":58,"nodeType":"208","messageId":"209","endLine":42,"endColumn":60},{"ruleId":"185","severity":1,"message":"233","line":7,"column":5,"nodeType":"187","messageId":"188","endLine":7,"endColumn":16},{"ruleId":"185","severity":1,"message":"238","line":18,"column":9,"nodeType":"187","messageId":"188","endLine":18,"endColumn":17},{"ruleId":"185","severity":1,"message":"234","line":70,"column":19,"nodeType":"187","messageId":"188","endLine":70,"endColumn":22},{"ruleId":"185","severity":1,"message":"196","line":83,"column":15,"nodeType":"187","messageId":"188","endLine":83,"endColumn":20},{"ruleId":"185","severity":1,"message":"239","line":83,"column":22,"nodeType":"187","messageId":"188","endLine":83,"endColumn":30},{"ruleId":"185","severity":1,"message":"240","line":83,"column":32,"nodeType":"187","messageId":"188","endLine":83,"endColumn":41},{"ruleId":"185","severity":1,"message":"241","line":13,"column":5,"nodeType":"187","messageId":"188","endLine":13,"endColumn":27},{"ruleId":"235","severity":1,"message":"236","line":16,"column":1,"nodeType":"237","endLine":125,"endColumn":2},{"ruleId":"206","severity":1,"message":"210","line":34,"column":44,"nodeType":"208","messageId":"209","endLine":34,"endColumn":46},{"ruleId":"206","severity":1,"message":"210","line":48,"column":31,"nodeType":"208","messageId":"209","endLine":48,"endColumn":33},{"ruleId":"206","severity":1,"message":"210","line":70,"column":60,"nodeType":"208","messageId":"209","endLine":70,"endColumn":62},{"ruleId":"206","severity":1,"message":"210","line":73,"column":30,"nodeType":"208","messageId":"209","endLine":73,"endColumn":32},{"ruleId":"206","severity":1,"message":"210","line":78,"column":45,"nodeType":"208","messageId":"209","endLine":78,"endColumn":47},{"ruleId":"242","severity":1,"message":"243","line":99,"column":9,"nodeType":"244","messageId":"245","endLine":99,"endColumn":15},"no-native-reassign",["246"],"no-negated-in-lhs",["247"],"no-unused-vars","'setError' is assigned a value but never used.","Identifier","unusedVar","'logiran' is assigned a value but never used.","'registriran' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'chats' is assigned a value but never used.","'setChats' is assigned a value but never used.","'grupa' is assigned a value but never used.","'setChanging' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'vmetniPoraka'. Either include it or remove the dependency array.","ArrayExpression",["248"],"'grupi' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'user._id' and 'zemiGrupi'. Either include them or remove the dependency array.",["249"],["250"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'citajKorisnici', 'user._id', and 'zemiPoraki'. Either include them or remove the dependency array.",["251"],"'saved' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'tempKorisnici'. Either include it or remove the dependency array.",["252"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'zemiPoraki' is assigned a value but never used.","'poraki' is assigned a value but never used.","'useState' is defined but never used.","'messagesEndRef' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["253"],"React Hook useEffect has a missing dependency: 'users'. Either include it or remove the dependency array.",["254"],"'loggedIn' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'namestiNajavenKorisnik' and 'user'. Either include them or remove the dependency array.",["255"],"'CLEAR_ERROR' is defined but never used.","'res' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'setToken' is defined but never used.","'sodrzina' is assigned a value but never used.","'isprakjac' is assigned a value but never used.","'SUCCESS_DELETE_MESSAGE' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","no-global-assign","no-unsafe-negation",{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"264","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},"Update the dependencies array to be: [vmetniPoraka]",{"range":"271","text":"272"},"Update the dependencies array to be: [user._id, zemiGrupi]",{"range":"273","text":"274"},"Update the dependencies array to be: [osveziGrupi, user._id, zemiGrupi]",{"range":"275","text":"276"},"Update the dependencies array to be: [citajKorisnici, grupi, user._id, zemiPoraki]",{"range":"277","text":"278"},"Update the dependencies array to be: [poslednoDodadenMail, change, tempKorisnici]",{"range":"279","text":"280"},{"range":"281","text":"280"},"Update the dependencies array to be: [grupa, users]",{"range":"282","text":"283"},"Update the dependencies array to be: [namestiNajavenKorisnik, user]",{"range":"284","text":"285"},[926,928],"[vmetniPoraka]",[1114,1116],"[user._id, zemiGrupi]",[1410,1423],"[osveziGrupi, user._id, zemiGrupi]",[2223,2230],"[citajKorisnici, grupi, user._id, zemiPoraki]",[1680,1709],"[poslednoDodadenMail, change, tempKorisnici]",[1499,1528],[2262,2269],"[grupa, users]",[933,935],"[namestiNajavenKorisnik, user]"]